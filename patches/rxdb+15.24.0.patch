diff --git a/node_modules/rxdb/package.json b/node_modules/rxdb/package.json
index 6112ad3..a506fad 100644
--- a/node_modules/rxdb/package.json
+++ b/node_modules/rxdb/package.json
@@ -1,585 +1,566 @@
 {
-  "name": "rxdb",
-  "description": "A local-first realtime NoSQL Database for JavaScript applications - https://rxdb.info/",
-  "version": "15.24.0",
-  "author": "pubkey",
-  "repository": {
-    "type": "git",
-    "url": "https://github.com/pubkey/rxdb"
-  },
-  "homepage": "https://rxdb.info/",
-  "keywords": [
-    "db",
-    "database",
-    "offline-first",
-    "local-first",
-    "local first",
-    "nosql",
-    "no-sql",
-    "jsonschema",
-    "schema",
-    "rxjs",
-    "pwa",
-    "progessive web app",
-    "hybrid app",
-    "localstorage",
-    "indexeddb",
-    "storage",
-    "react-native",
-    "encryption",
-    "encrypted",
-    "firestore",
-    "firebase",
-    "couchdb",
-    "pouchdb",
-    "nats",
-    "websql",
-    "sqlite",
-    "query",
-    "live-query",
-    "realtime query",
-    "reactive",
-    "replication",
-    "realtime",
-    "realtime database",
-    "local database",
-    "embedded database",
-    "in-memory",
-    "memory",
-    "memory database",
-    "local database",
-    "embedded",
-    "embed",
-    "electron database",
-    "mongodb",
-    "lokijs",
-    "JSON",
-    "angular database",
-    "react database",
-    "capacitor database",
-    "node.js database",
-    "document",
-    "file database",
-    "json database",
-    "key value database",
-    "database driver",
-    "database abstraction layer",
-    "document database",
-    "graph database",
-    "mock database",
-    "cross-database",
-    "asyncstorage",
-    "localforage",
-    "mongoose",
-    "migrate database",
-    "websocket database",
-    "database-client",
-    "dbms",
-    "database engine",
-    "datastore"
-  ],
-  "engines": {
-    "node": ">=18"
-  },
-  "license": "Apache-2.0",
-  "types": "./dist/types/index.d.ts",
-  "sideEffects": false,
-  "main": "./dist/cjs/index.js",
-  "module": "./dist/esm/index.js",
-  "exports": {
-    ".": {
-      "types": "./dist/types/index.d.ts",
-      "require": "./dist/cjs/index.js",
-      "import": "./dist/esm/index.js",
-      "default": "./dist/esm/index.js"
-    },
-    "./plugins/core": {
-      "types": "./dist/types/index.d.ts",
-      "require": "./dist/cjs/index.js",
-      "import": "./dist/esm/index.js",
-      "default": "./dist/esm/index.js"
-    },
-    "./plugins/utils": {
-      "types": "./dist/types/plugins/utils/index.d.ts",
-      "require": "./dist/cjs/plugins/utils/index.js",
-      "import": "./dist/esm/plugins/utils/index.js",
-      "default": "./dist/esm/plugins/utils/index.js"
-    },
-    "./plugins/backup": {
-      "types": "./dist/types/plugins/backup/index.d.ts",
-      "require": "./dist/cjs/plugins/backup/index.js",
-      "import": "./dist/esm/plugins/backup/index.js",
-      "default": "./dist/esm/plugins/backup/index.js"
-    },
-    "./plugins/cleanup": {
-      "types": "./dist/types/plugins/cleanup/index.d.ts",
-      "require": "./dist/cjs/plugins/cleanup/index.js",
-      "import": "./dist/esm/plugins/cleanup/index.js",
-      "default": "./dist/esm/plugins/cleanup/index.js"
-    },
-    "./plugins/crdt": {
-      "types": "./dist/types/plugins/crdt/index.d.ts",
-      "require": "./dist/cjs/plugins/crdt/index.js",
-      "import": "./dist/esm/plugins/crdt/index.js",
-      "default": "./dist/esm/plugins/crdt/index.js"
-    },
-    "./plugins/dev-mode": {
-      "types": "./dist/types/plugins/dev-mode/index.d.ts",
-      "require": "./dist/cjs/plugins/dev-mode/index.js",
-      "import": "./dist/esm/plugins/dev-mode/index.js",
-      "default": "./dist/esm/plugins/dev-mode/index.js"
-    },
-    "./plugins/storage-dexie": {
-      "types": "./dist/types/plugins/storage-dexie/index.d.ts",
-      "require": "./dist/cjs/plugins/storage-dexie/index.js",
-      "import": "./dist/esm/plugins/storage-dexie/index.js",
-      "default": "./dist/esm/plugins/storage-dexie/index.js"
-    },
-    "./plugins/electron": {
-      "types": "./dist/types/plugins/electron/index.d.ts",
-      "require": "./dist/cjs/plugins/electron/index.js",
-      "import": "./dist/esm/plugins/electron/index.js",
-      "default": "./dist/esm/plugins/electron/index.js"
-    },
-    "./plugins/flutter": {
-      "types": "./dist/types/plugins/flutter/index.d.ts",
-      "require": "./dist/cjs/plugins/flutter/index.js",
-      "import": "./dist/esm/plugins/flutter/index.js",
-      "default": "./dist/esm/plugins/flutter/index.js"
-    },
-    "./plugins/storage-foundationdb": {
-      "types": "./dist/types/plugins/storage-foundationdb/index.d.ts",
-      "require": "./dist/cjs/plugins/storage-foundationdb/index.js",
-      "import": "./dist/esm/plugins/storage-foundationdb/index.js",
-      "default": "./dist/esm/plugins/storage-foundationdb/index.js"
-    },
-    "./plugins/local-documents": {
-      "types": "./dist/types/plugins/local-documents/index.d.ts",
-      "require": "./dist/cjs/plugins/local-documents/index.js",
-      "import": "./dist/esm/plugins/local-documents/index.js",
-      "default": "./dist/esm/plugins/local-documents/index.js"
-    },
-    "./plugins/storage-lokijs": {
-      "types": "./dist/types/plugins/storage-lokijs/index.d.ts",
-      "require": "./dist/cjs/plugins/storage-lokijs/index.js",
-      "import": "./dist/esm/plugins/storage-lokijs/index.js",
-      "default": "./dist/esm/plugins/storage-lokijs/index.js"
-    },
-    "./plugins/storage-memory": {
-      "types": "./dist/types/plugins/storage-memory/index.d.ts",
-      "require": "./dist/cjs/plugins/storage-memory/index.js",
-      "import": "./dist/esm/plugins/storage-memory/index.js",
-      "default": "./dist/esm/plugins/storage-memory/index.js"
-    },
-    "./plugins/storage-mongodb": {
-      "types": "./dist/types/plugins/storage-mongodb/index.d.ts",
-      "require": "./dist/cjs/plugins/storage-mongodb/index.js",
-      "import": "./dist/esm/plugins/storage-mongodb/index.js",
-      "default": "./dist/esm/plugins/storage-mongodb/index.js"
-    },
-    "./plugins/storage-denokv": {
-      "types": "./dist/types/plugins/storage-denokv/index.d.ts",
-      "require": "./dist/cjs/plugins/storage-denokv/index.js",
-      "import": "./dist/esm/plugins/storage-denokv/index.js",
-      "default": "./dist/esm/plugins/storage-denokv/index.js"
-    },
-    "./plugins/migration-schema": {
-      "types": "./dist/types/plugins/migration-schema/index.d.ts",
-      "require": "./dist/cjs/plugins/migration-schema/index.js",
-      "import": "./dist/esm/plugins/migration-schema/index.js",
-      "default": "./dist/esm/plugins/migration-schema/index.js"
-    },
-    "./plugins/migration-storage": {
-      "types": "./dist/types/plugins/migration-storage/index.d.ts",
-      "require": "./dist/cjs/plugins/migration-storage/index.js",
-      "import": "./dist/esm/plugins/migration-storage/index.js",
-      "default": "./dist/esm/plugins/migration-storage/index.js"
-    },
-    "./plugins/query-builder": {
-      "types": "./dist/types/plugins/query-builder/index.d.ts",
-      "require": "./dist/cjs/plugins/query-builder/index.js",
-      "import": "./dist/esm/plugins/query-builder/index.js",
-      "default": "./dist/esm/plugins/query-builder/index.js"
-    },
-    "./plugins/replication": {
-      "types": "./dist/types/plugins/replication/index.d.ts",
-      "require": "./dist/cjs/plugins/replication/index.js",
-      "import": "./dist/esm/plugins/replication/index.js",
-      "default": "./dist/esm/plugins/replication/index.js"
-    },
-    "./plugins/replication-firestore": {
-      "types": "./dist/types/plugins/replication-firestore/index.d.ts",
-      "require": "./dist/cjs/plugins/replication-firestore/index.js",
-      "import": "./dist/esm/plugins/replication-firestore/index.js",
-      "default": "./dist/esm/plugins/replication-firestore/index.js"
-    },
-    "./plugins/replication-graphql": {
-      "types": "./dist/types/plugins/replication-graphql/index.d.ts",
-      "require": "./dist/cjs/plugins/replication-graphql/index.js",
-      "import": "./dist/esm/plugins/replication-graphql/index.js",
-      "default": "./dist/esm/plugins/replication-graphql/index.js"
-    },
-    "./plugins/replication-webrtc": {
-      "types": "./dist/types/plugins/replication-webrtc/index.d.ts",
-      "require": "./dist/cjs/plugins/replication-webrtc/index.js",
-      "import": "./dist/esm/plugins/replication-webrtc/index.js",
-      "default": "./dist/esm/plugins/replication-webrtc/index.js"
-    },
-    "./plugins/replication-websocket": {
-      "types": "./dist/types/plugins/replication-websocket/index.d.ts",
-      "require": "./dist/cjs/plugins/replication-websocket/index.js",
-      "import": "./dist/esm/plugins/replication-websocket/index.js",
-      "default": "./dist/esm/plugins/replication-websocket/index.js"
-    },
-    "./plugins/storage-remote": {
-      "types": "./dist/types/plugins/storage-remote/index.d.ts",
-      "require": "./dist/cjs/plugins/storage-remote/index.js",
-      "import": "./dist/esm/plugins/storage-remote/index.js",
-      "default": "./dist/esm/plugins/storage-remote/index.js"
-    },
-    "./plugins/storage-remote-websocket": {
-      "types": "./dist/types/plugins/storage-remote-websocket/index.d.ts",
-      "require": "./dist/cjs/plugins/storage-remote-websocket/index.js",
-      "import": "./dist/esm/plugins/storage-remote-websocket/index.js",
-      "default": "./dist/esm/plugins/storage-remote-websocket/index.js"
-    },
-    "./plugins/attachments": {
-      "types": "./dist/types/plugins/attachments/index.d.ts",
-      "require": "./dist/cjs/plugins/attachments/index.js",
-      "import": "./dist/esm/plugins/attachments/index.js",
-      "default": "./dist/esm/plugins/attachments/index.js"
-    },
-    "./plugins/attachments-compression": {
-      "types": "./dist/types/plugins/attachments-compression/index.d.ts",
-      "require": "./dist/cjs/plugins/attachments-compression/index.js",
-      "import": "./dist/esm/plugins/attachments-compression/index.js",
-      "default": "./dist/esm/plugins/attachments-compression/index.js"
-    },
-    "./plugins/encryption-crypto-js": {
-      "types": "./dist/types/plugins/encryption-crypto-js/index.d.ts",
-      "require": "./dist/cjs/plugins/encryption-crypto-js/index.js",
-      "import": "./dist/esm/plugins/encryption-crypto-js/index.js",
-      "default": "./dist/esm/plugins/encryption-crypto-js/index.js"
-    },
-    "./plugins/json-dump": {
-      "types": "./dist/types/plugins/json-dump/index.d.ts",
-      "require": "./dist/cjs/plugins/json-dump/index.js",
-      "import": "./dist/esm/plugins/json-dump/index.js",
-      "default": "./dist/esm/plugins/json-dump/index.js"
-    },
-    "./plugins/key-compression": {
-      "types": "./dist/types/plugins/key-compression/index.d.ts",
-      "require": "./dist/cjs/plugins/key-compression/index.js",
-      "import": "./dist/esm/plugins/key-compression/index.js",
-      "default": "./dist/esm/plugins/key-compression/index.js"
-    },
-    "./plugins/leader-election": {
-      "types": "./dist/types/plugins/leader-election/index.d.ts",
-      "require": "./dist/cjs/plugins/leader-election/index.js",
-      "import": "./dist/esm/plugins/leader-election/index.js",
-      "default": "./dist/esm/plugins/leader-election/index.js"
-    },
-    "./plugins/replication-couchdb": {
-      "types": "./dist/types/plugins/replication-couchdb/index.d.ts",
-      "require": "./dist/cjs/plugins/replication-couchdb/index.js",
-      "import": "./dist/esm/plugins/replication-couchdb/index.js",
-      "default": "./dist/esm/plugins/replication-couchdb/index.js"
-    },
-    "./plugins/replication-nats": {
-      "types": "./dist/types/plugins/replication-nats/index.d.ts",
-      "require": "./dist/cjs/plugins/replication-nats/index.js",
-      "import": "./dist/esm/plugins/replication-nats/index.js",
-      "default": "./dist/esm/plugins/replication-nats/index.js"
-    },
-    "./plugins/update": {
-      "types": "./dist/types/plugins/update/index.d.ts",
-      "require": "./dist/cjs/plugins/update/index.js",
-      "import": "./dist/esm/plugins/update/index.js",
-      "default": "./dist/esm/plugins/update/index.js"
-    },
-    "./plugins/state": {
-      "types": "./dist/types/plugins/state/index.d.ts",
-      "require": "./dist/cjs/plugins/state/index.js",
-      "import": "./dist/esm/plugins/state/index.js",
-      "default": "./dist/esm/plugins/state/index.js"
-    },
-    "./plugins/validate-ajv": {
-      "types": "./dist/types/plugins/validate-ajv/index.d.ts",
-      "require": "./dist/cjs/plugins/validate-ajv/index.js",
-      "import": "./dist/esm/plugins/validate-ajv/index.js",
-      "default": "./dist/esm/plugins/validate-ajv/index.js"
-    },
-    "./plugins/validate-is-my-json-valid": {
-      "types": "./dist/types/plugins/validate-is-my-json-valid/index.d.ts",
-      "require": "./dist/cjs/plugins/validate-is-my-json-valid/index.js",
-      "import": "./dist/esm/plugins/validate-is-my-json-valid/index.js",
-      "default": "./dist/esm/plugins/validate-is-my-json-valid/index.js"
-    },
-    "./plugins/validate-z-schema": {
-      "types": "./dist/types/plugins/validate-z-schema/index.d.ts",
-      "require": "./dist/cjs/plugins/validate-z-schema/index.js",
-      "import": "./dist/esm/plugins/validate-z-schema/index.js",
-      "default": "./dist/esm/plugins/validate-z-schema/index.js"
-    },
-    "./plugins/test-utils": {
-      "types": "./dist/types/plugins/test-utils/index.d.ts",
-      "require": "./dist/cjs/plugins/test-utils/index.js",
-      "import": "./dist/esm/plugins/test-utils/index.js",
-      "default": "./dist/esm/plugins/test-utils/index.js"
-    },
-    "./package.json": "./package.json"
-  },
-  "scripts": {
-    "postinstall": "node scripts/postinstall.js || echo \"ignore\"",
-    "test": "npm run test:node && npm run test:browser",
-    "// test:fast": "run tests in the fast-mode. Most of them will run in parrallel, skips tests that are known slow",
-    "test:fast": "npm run test:fast:memory && npm run test:fast:lokijs && npm run test:fast:dexie",
-    "test:fast:memory": "npm run transpile && cross-env DEFAULT_STORAGE=memory NODE_ENV=fast mocha --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
-    "test:fast:memory-validation": "npm run transpile && cross-env DEFAULT_STORAGE=memory-validation NODE_ENV=fast mocha --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
-    "test:fast:memory-random-delay": "npm run transpile && cross-env DEFAULT_STORAGE=memory-random-delay NODE_ENV=fast mocha --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
-    "test:fast:lokijs": "npm run transpile && cross-env DEFAULT_STORAGE=lokijs NODE_ENV=fast mocha --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
-    "test:fast:dexie": "npm run transpile && cross-env DEFAULT_STORAGE=dexie NODE_ENV=fast mocha --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
-    "test:fast:foundationdb": "npm run transpile && cross-env DEFAULT_STORAGE=foundationdb NODE_ENV=fast mocha --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
-    "test:fast:mongodb": "npm run transpile && cross-env DEFAULT_STORAGE=mongodb NODE_ENV=fast mocha --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
-    "// test:fast:loop": "runs tests in the fast-mode in a loop. Use this to debug tests that only fail sometimes",
-    "test:fast:loop": "npm run test:fast && npm run test:fast:loop",
-    "test:fast:loop:lokijs": "npm run test:fast:lokijs && npm run test:fast:loop:lokijs",
-    "test:fast:loop:memory": "npm run test:fast:memory && npm run test:fast:loop:memory",
-    "test:fast:loop:dexie": "npm run test:fast:dexie && npm run test:fast:loop:dexie",
-    "test:fast:loop:mongodb": "npm run test:fast:mongodb && npm run test:fast:loop:mongodb",
-    "test:fast:loop:memory-random-delay": "npm run test:fast:memory-random-delay && npm run test:fast:loop:memory-random-delay",
-    "test:node": "npm run test:node:lokijs && npm run test:node:dexie",
-    "test:node:memory": "npm run transpile && cross-env DEFAULT_STORAGE=memory mocha --expose-gc --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
-    "test:node:memory-validation": "npm run transpile && cross-env DEFAULT_STORAGE=memory-validation mocha --expose-gc --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
-    "test:node:memory-random-delay": "npm run transpile && cross-env DEFAULT_STORAGE=memory-random-delay mocha --expose-gc --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
-    "test:node:lokijs": "npm run transpile && cross-env DEFAULT_STORAGE=lokijs mocha --expose-gc --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
-    "test:node:dexie": "npm run transpile && cross-env DEFAULT_STORAGE=dexie mocha --expose-gc --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
-    "test:bun:dexie": "npm run transpile && cross-env DEFAULT_STORAGE=dexie NODE_ENV=fast bun run ./node_modules/mocha/bin/mocha test_tmp/unit.test.js --bail",
-    "test:deno:dexie": "npm run transpile && cross-env DEFAULT_STORAGE=dexie deno run --unstable --allow-env --unstable-byonm --allow-read -A npm:mocha ./test/unit.test.ts --bail",
-    "test:deno:denokv": "npm run transpile && cross-env DEFAULT_STORAGE=denokv deno run --unstable --allow-env --unstable-byonm --allow-read -A npm:mocha ./test/unit.test.ts --bail",
-    "test:deno:denokv:loop": "npm run test:deno:denokv && npm run test:deno:denokv:loop",
-    "test:deno:memory": "npm run transpile && cross-env DEFAULT_STORAGE=memory deno run --unstable --allow-env --unstable-byonm --allow-read -A npm:mocha ./test/unit.test.ts --bail",
-    "test:node:foundationdb": "npm run transpile && cross-env DEFAULT_STORAGE=foundationdb mocha --expose-gc --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
-    "test:node:mongodb": "npm run transpile && cross-env DEFAULT_STORAGE=mongodb mocha --expose-gc --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
-    "test:node:mongodb:loop": "npm run test:node:mongodb && npm run test:node:mongodb:loop",
-    "test:node:remote": "npm run transpile && cross-env DEFAULT_STORAGE=remote mocha --expose-gc --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
-    "test:node:remote:loop": "npm run test:node:remote && npm run test:node:remote:loop",
-    "test:node:lokijs:loop": "npm run test:node:lokijs && npm run test:node:lokijs:loop",
-    "test:node:memory:loop": "npm run test:node:memory && npm run test:node:memory:loop",
-    "test:node:dexie:loop": "npm run test:node:dexie && npm run test:node:dexie:loop",
-    "test:node:foundationdb:loop": "npm run test:node:foundationdb && npm run test:node:foundationdb:loop",
-    "test:node:custom": "npm run transpile && cross-env DEFAULT_STORAGE=custom mocha --expose-gc --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
-    "// test:node:loop": "runs tests in node in a loop. Use this to debug tests that only fail sometimes",
-    "test:node:loop": "npm run test:node && npm run test:node:loop",
-    "test:node:loop:memory-random-delay": "npm run test:node:memory-random-delay && npm run test:node:loop:memory-random-delay",
-    "test:browser:loop": "npm run test:browser && npm run test:browser:loop",
-    "test:browser:lokijs": " npm run transpile && cross-env CI=true DEFAULT_STORAGE=lokijs  karma start ./config/karma.conf.cjs --single-run",
-    "test:browser:memory": " npm run transpile && cross-env CI=true DEFAULT_STORAGE=memory  karma start ./config/karma.conf.cjs --single-run",
-    "test:browser:memory:loop": "npm run test:browser:memory && npm run test:browser:memory:loop",
-    "test:browser:dexie": "  npm run transpile && cross-env CI=true DEFAULT_STORAGE=dexie   karma start ./config/karma.conf.cjs --single-run",
-    "test:browser:remote": "  npm run transpile && cross-env CI=true DEFAULT_STORAGE=remote karma start ./config/karma.conf.cjs --single-run",
-    "test:browser:remote:loop": "npm run test:browser:remote && npm run test:browser:remote:loop",
-    "test:browser:custom": " npm run transpile && cross-env CI=true DEFAULT_STORAGE=custom  karma start ./config/karma.conf.cjs --single-run",
-    "test:replication-firestore": "npm run transpile && firebase emulators:exec \"cross-env DEFAULT_STORAGE=dexie mocha --expose-gc --config ./config/.mocharc.cjs ./test_tmp/replication-firestore.test.js\" --only firestore --project 'rxdb-test'",
-    "test:replication-couchdb": "npm run transpile && concurrently \"npm run couch:start\" \"cross-env NATIVE_COUCHDB=5984 DEFAULT_STORAGE=dexie mocha --config ./config/.mocharc.cjs ./test_tmp/replication-couchdb.test.js\" --success first --kill-others",
-    "test:replication-nats": "npm run transpile && concurrently \"npm run nats:start\" \"cross-env DEFAULT_STORAGE=dexie mocha --config ./config/.mocharc.cjs ./test_tmp/replication-nats.test.js\" --success first --kill-others",
-    "test:core": "npm run transpile && mocha ./test_tmp/unit/core.node.js",
-    "test:full": "npm run transpile && mocha ./test_tmp/unit/full.node.js",
-    "test:typings": "npm run build:plugins && tsc --allowImportingTsExtensions --noEmit --skipLibCheck --lib \"ES2022,DOM\" ./test/typings.test.ts",
-    "test:deps": "npm run build && dependency-check ./package.json ./dist/cjs/index.js ./dist/cjs/plugins/validate-is-my-json-valid/index.js ./dist/cjs/plugins/attachments-compression/index.js ./dist/cjs/plugins/validate-ajv/index.js ./dist/cjs/plugins/update/index.js ./dist/cjs/plugins/key-compression/index.js ./dist/cjs/plugins/dev-mode/index.js ./dist/cjs/plugins/encryption-crypto-js/index.js ./dist/cjs/plugins/replication-graphql/index.js ./dist/cjs/plugins/replication-webrtc/index.js ./dist/cjs/plugins/replication-websocket/index.js ./dist/cjs/plugins/replication-firestore/index.js ./dist/cjs/plugins/replication-nats/index.js ./dist/cjs/plugins/validate-z-schema/index.js ./dist/cjs/plugins/storage-lokijs/index.js ./dist/cjs/plugins/storage-dexie/index.js ./dist/cjs/plugins/storage-memory/index.js ./dist/cjs/plugins/storage-mongodb/index.js --no-dev --ignore-module util --ignore-module url --ignore-module ws --ignore-module graphql --ignore-module as-typed --ignore-module \"@types/*\"",
-    "test:circular": "npm run build && madge --circular ./dist/esm/index.js && madge --circular ./dist/esm/plugins/storage-dexie/index.js",
-    "test:performance:lokijs:browser": "npm run transpile && cross-env DEFAULT_STORAGE=lokijs CI=true karma start ./config/karma.performance.conf.cjs --single-run",
-    "test:performance:lokijs:node": "npm run transpile && cross-env DEFAULT_STORAGE=lokijs mocha --config ./config/.mocharc.cjs ./test_tmp/performance.test.js --unhandled-rejections=strict --expose-gc",
-    "test:performance:dexie": "npm run transpile && cross-env DEFAULT_STORAGE=dexie CI=true karma start ./config/karma.performance.conf.cjs --single-run",
-    "test:performance:memory:browser": "npm run transpile && cross-env DEFAULT_STORAGE=memory CI=true karma start ./config/karma.performance.conf.cjs --single-run",
-    "test:performance:memory:node": "npm run transpile && cross-env DEFAULT_STORAGE=memory mocha --config ./config/.mocharc.cjs ./test_tmp/performance.test.js --unhandled-rejections=strict --expose-gc",
-    "test:performance:memory:bun": "npm run transpile && cross-env DEFAULT_STORAGE=memory bun run ./node_modules/mocha/bin/mocha test_tmp/performance.test.js --bail",
-    "test:performance:memory:deno": "npm run transpile && cross-env DEFAULT_STORAGE=memory deno run --unstable --allow-env --allow-read -A npm:mocha test/performance.test.ts --bail",
-    "test:performance:foundationdb": "npm run transpile && cross-env DEFAULT_STORAGE=foundationdb mocha --config ./config/.mocharc.cjs ./test_tmp/performance.test.js --unhandled-rejections=strict --expose-gc",
-    "test:performance:mongodb": "npm run transpile && cross-env DEFAULT_STORAGE=mongodb mocha --config ./config/.mocharc.cjs ./test_tmp/performance.test.js --unhandled-rejections=strict --expose-gc",
-    "test:performance:custom:browser": "npm run transpile && cross-env DEFAULT_STORAGE=custom CI=true karma start ./config/karma.performance.conf.cjs --single-run",
-    "test:performance:custom:node": "npm run transpile && cross-env DEFAULT_STORAGE=custom mocha --config ./config/.mocharc.cjs ./test_tmp/performance.test.js --unhandled-rejections=strict --expose-gc",
-    "test:performance": "npm run build && npm run test:performance:lokijs:browser && npm run test:performance:lokijs:node && npm run test:performance:dexie && npm run test:performance:memory:browser && npm run test:performance:memory:node",
-    "test:query-correctness-fuzzing:memory:node": "npm run transpile && cross-env DEFAULT_STORAGE=memory mocha --config ./config/.mocharc.cjs ./test_tmp/query-correctness-fuzzing.test.js --unhandled-rejections=strict --expose-gc",
-    "test:query-correctness-fuzzing:custom:node": "npm run transpile && cross-env DEFAULT_STORAGE=custom mocha --config ./config/.mocharc.cjs ./test_tmp/query-correctness-fuzzing.test.js --unhandled-rejections=strict --expose-gc",
-    "test:query-correctness-fuzzing:lokijs:node": "npm run transpile && cross-env DEFAULT_STORAGE=lokijs mocha --config ./config/.mocharc.cjs ./test_tmp/query-correctness-fuzzing.test.js --unhandled-rejections=strict --expose-gc",
-    "couch:start": "docker run -p 5984:5984 -e COUCHDB_USER=root -e COUCHDB_PASSWORD=root --rm --name rxdb-couchdb couchdb:3.3.3",
-    "couch:stop": "docker rm -f rxdb-couchdb",
-    "mongodb:start": "docker run -p 27017:27017 -p 27018:27018 -p 27019:27019 --rm --name rxdb-mongodb mongo:7.0.1",
-    "mongodb:stop": "docker rm -f rxdb-mongodb",
-    "nats:start": "docker run --rm --name rxdb-nats -p 4222:4222 nats:2.9.17 -js",
-    "nats:stop": "docker rm -f rxdb-nats",
-    "dockertest": "docker run -it -v $(pwd):/usr/src/app markadams/chromium-xvfb-js:latest-onbuild",
-    "profile": "npm run transpile && rm -f isolate-* && cross-env DEFAULT_STORAGE=memory NODE_PROF=true mocha --config ./config/.mocharc.cjs ./test_tmp/performance.test.js --v8-prof --expose-gc && node scripts/profile.mjs",
-    "clear": "rimraf -rf test_tmp/ && rimraf -rf dist/ && rimraf .transpile_state.json",
-    "lint": "eslint . --ext .js,.ts --cache",
-    "lint:fix": "eslint --fix . --ext .js,.ts",
-    "lint:debug:files": "DEBUG=eslint:cli-engine eslint --ext .js,.ts,.json .",
-    "lint:debug:time": "TIMING=1 eslint --ext .js,.ts,.json .",
-    "check-types": "tsc",
-    "transpile": "npm run build:version && node scripts/transpile.mjs && echo '{ \"type\": \"module\" }' > test_tmp/package.json",
-    "build:version": "node ./scripts/update-version-variable.mjs",
-    "build:esm": "npm run build:version && rimraf -rf --max-retries=3 dist/esm && cross-env NODE_ENV=es6 babel src --out-dir dist/esm --source-maps --extensions \".ts,.js\" && echo '{ \"type\": \"module\", \"sideEffects\": false }' > dist/esm/package.json",
-    "build:types": "npm run build:version && rimraf -rf --max-retries=3 ./dist/types && tsc --project ./config/tsconfig.types.json && cp -r ./src/types ./dist/types/types && node ./scripts/fix-types.mjs",
-    "build": "npm run clear && npm run build:version && concurrently \"npm run transpile\" \"npm run build:esm\" \"npm run build:types\" \"npm run build:plugins\"",
-    "build:plugins": "node ./scripts/generate-plugins-package-json.mjs",
-    "build:webpack": "npm run build && cross-env NODE_ENV=build webpack --config ./config/webpack.config.js",
-    "build:rollup": "npm run build && rollup --config ./config/rollup.config.mjs",
-    "build:size": "npm run build:webpack && echo \"Build-Size (minified+gzip):\" && gzip-size --raw ./test_tmp/webpack.bundle.js",
-    "docs:install": "(cd docs-src/ && npm install)",
-    "// docs:serve": "start a local server to watch the docs. Served at http://localhost:4000/",
-    "docs:serve": "(cd docs-src/ && npm start)",
-    "docs:build": "rimraf -rf ./docs && mkdir ./docs && (cd docs-src/ && npm run build) && cp -r ./docs-src/build/* ./docs && cp ./docs-src/CNAME ./docs/CNAME",
-    "docs:remove:time": "node ./scripts/docs-remove-time.mjs",
-    "disc": "npm run transpile && npm run build:esm && cross-env NODE_ENV=disc webpack --config ./config/webpack.config.js",
-    "preversion": "npm run lint && npm run test",
-    "dev": "watch 'npm run test:node:memory' src/ test/",
-    "dev:example": "watch 'npm run transpile:src && echo \"done\"' src/ test/",
-    "cloud-signaling-server": "node ./scripts/start-cloud-signaling-server.mjs --max-old-space-size=2048"
-  },
-  "pre-commit": [
-    "lint"
-  ],
-  "peerDependencies": {
-    "rxjs": "^7.8.0"
-  },
-  "dependencies": {
-    "@babel/runtime": "7.24.7",
-    "@types/clone": "2.1.4",
-    "@types/cors": "2.8.17",
-    "@types/express": "4.17.21",
-    "@types/simple-peer": "9.11.8",
-    "@types/ws": "8.5.10",
-    "ajv": "8.16.0",
-    "array-push-at-sort-position": "4.0.1",
-    "as-typed": "1.3.2",
-    "broadcast-channel": "7.0.0",
-    "crypto-js": "4.2.0",
-    "custom-idle-queue": "3.0.1",
-    "dexie": "4.0.7",
-    "event-reduce-js": "5.2.7",
-    "firebase": "10.12.2",
-    "get-graphql-from-jsonschema": "8.1.0",
-    "graphql": "15.8.0",
-    "graphql-ws": "5.16.0",
-    "is-my-json-valid": "2.20.6",
-    "isomorphic-ws": "5.0.0",
-    "js-base64": "3.7.7",
-    "jsonschema-key-compression": "1.7.0",
-    "lokijs": "1.5.12",
-    "mingo": "6.4.13",
-    "mongodb": "6.7.0",
-    "nats": "2.26.0",
-    "oblivious-set": "1.4.0",
-    "ohash": "1.1.3",
-    "reconnecting-websocket": "4.4.0",
-    "simple-peer": "9.11.1",
-    "unload": "2.4.1",
-    "util": "0.12.5",
-    "ws": "8.16.0",
-    "z-schema": "6.0.1"
-  },
-  "devDependencies": {
-    "@babel/cli": "7.24.7",
-    "@babel/core": "7.24.7",
-    "@babel/plugin-external-helpers": "7.24.7",
-    "@babel/plugin-proposal-class-properties": "7.18.6",
-    "@babel/plugin-proposal-object-rest-spread": "7.20.7",
-    "@babel/plugin-transform-literals": "7.24.7",
-    "@babel/plugin-transform-member-expression-literals": "7.24.7",
-    "@babel/plugin-transform-modules-commonjs": "7.24.7",
-    "@babel/plugin-transform-property-literals": "7.24.7",
-    "@babel/plugin-transform-runtime": "7.24.7",
-    "@babel/plugin-transform-spread": "7.24.7",
-    "@babel/plugin-transform-template-literals": "7.24.7",
-    "@babel/plugin-transform-typescript": "7.24.7",
-    "@babel/polyfill": "7.12.1",
-    "@babel/preset-env": "7.24.7",
-    "@babel/preset-typescript": "7.24.7",
-    "@babel/types": "7.24.7",
-    "@faker-js/faker": "8.4.1",
-    "@rollup/plugin-commonjs": "25.0.8",
-    "@rollup/plugin-node-resolve": "15.2.3",
-    "@types/assert": "1.5.10",
-    "@types/core-js": "2.5.8",
-    "@types/cors": "2.8.17",
-    "@types/crypto-js": "4.2.2",
-    "@types/mocha": "10.0.6",
-    "@types/node": "20.14.2",
-    "@types/request": "2.48.12",
-    "@types/request-promise-native": "1.0.21",
-    "@types/source-map-support": "0.5.10",
-    "@typescript-eslint/eslint-plugin": "7.12.0",
-    "@typescript-eslint/parser": "7.12.0",
-    "assert": "2.1.0",
-    "async-test-util": "2.5.0",
-    "babel-loader": "9.1.3",
-    "babel-plugin-transform-class-properties": "6.24.1",
-    "brfs": "2.0.2",
-    "child-process-promise": "2.2.1",
-    "clone": "2.1.2",
-    "concurrently": "8.2.2",
-    "copy-webpack-plugin": "12.0.2",
-    "cors": "2.8.5",
-    "cross-env": "7.0.3",
-    "delete": "1.1.0",
-    "dependency-check": "4.1.0",
-    "disc": "1.3.3",
-    "eslint": "8.57.0",
-    "eslint-plugin-import": "2.29.1",
-    "eslint-plugin-jsdoc": "48.2.9",
-    "exists-file": "3.0.2",
-    "express": "4.19.2",
-    "express-graphql": "0.12.0",
-    "fake-indexeddb": "6.0.0",
-    "firebase-tools": "13.10.2",
-    "get-port": "5.1.1",
-    "graphql-subscriptions": "2.0.0",
-    "gzip-size-cli": "5.1.0",
-    "html-webpack-plugin": "5.6.0",
-    "karma": "6.4.3",
-    "karma-babel-preprocessor": "8.0.2",
-    "karma-chrome-launcher": "3.2.0",
-    "karma-coverage": "2.2.1",
-    "karma-detect-browsers": "2.3.3",
-    "karma-firefox-launcher": "2.1.3",
-    "karma-ie-launcher": "1.0.0",
-    "karma-mocha": "2.0.1",
-    "karma-opera-launcher": "1.0.0",
-    "karma-safari-launcher": "1.0.0",
-    "karma-sourcemap-loader": "0.4.0",
-    "karma-spec-reporter": "0.0.36",
-    "karma-webpack": "5.0.1",
-    "leveldown": "6.1.1",
-    "madge": "7.0.0",
-    "mini-css-extract-plugin": "2.9.0",
-    "mocha": "10.4.0",
-    "mocha.parallel": "0.15.6",
-    "nconf": "0.12.1",
-    "node-datachannel": "0.9.1",
-    "node-pre-gyp": "0.17.0",
-    "pre-commit": "1.2.2",
-    "process": "0.11.10",
-    "querystring-es3": "0.2.1",
-    "random-int": "3.0.0",
-    "readline": "1.3.0",
-    "rimraf": "5.0.7",
-    "rollup": "4.18.0",
-    "rxdb-old": "npm:rxdb@14.17.1",
-    "rxjs": "7.8.1",
-    "shelljs": "0.8.5",
-    "source-map-support": "0.5.21",
-    "stream": "0.0.2",
-    "terser": "5.31.0",
-    "terser-webpack-plugin": "5.3.10",
-    "ts-loader": "9.5.1",
-    "ts-mocha": "10.0.0",
-    "typescript": "5.4.5",
-    "walk-sync": "3.0.0",
-    "watch": "1.0.2",
-    "webpack": "5.91.0",
-    "webpack-bundle-analyzer": "4.10.2",
-    "webpack-cli": "5.1.4",
-    "webpack-dev-server": "5.0.4"
-  }
+    "name": "rxdb",
+    "description": "A patched local-first realtime NoSQL Database for JavaScript applications - https://rxdb.info/",
+    "version": "15.24.0",
+    "author": "pubkey",
+    "repository": {
+        "type": "git",
+        "url": "https://github.com/pubkey/rxdb"
+    },
+    "homepage": "https://rxdb.info/",
+    "keywords": [
+        "db",
+        "database",
+        "offline-first",
+        "local-first",
+        "local first",
+        "nosql",
+        "no-sql",
+        "jsonschema",
+        "schema",
+        "rxjs",
+        "pwa",
+        "progessive web app",
+        "hybrid app",
+        "localstorage",
+        "indexeddb",
+        "storage",
+        "react-native",
+        "encryption",
+        "encrypted",
+        "couchdb",
+        "pouchdb",
+        "nats",
+        "websql",
+        "sqlite",
+        "query",
+        "live-query",
+        "realtime query",
+        "reactive",
+        "replication",
+        "realtime",
+        "realtime database",
+        "local database",
+        "embedded database",
+        "in-memory",
+        "memory",
+        "memory database",
+        "local database",
+        "embedded",
+        "embed",
+        "electron database",
+        "mongodb",
+        "lokijs",
+        "JSON",
+        "angular database",
+        "react database",
+        "capacitor database",
+        "node.js database",
+        "document",
+        "file database",
+        "json database",
+        "key value database",
+        "database driver",
+        "database abstraction layer",
+        "document database",
+        "graph database",
+        "mock database",
+        "cross-database",
+        "asyncstorage",
+        "localforage",
+        "mongoose",
+        "migrate database",
+        "websocket database",
+        "database-client",
+        "dbms",
+        "database engine",
+        "datastore"
+    ],
+    "engines": {
+        "node": ">=18"
+    },
+    "license": "Apache-2.0",
+    "types": "./dist/types/index.d.ts",
+    "sideEffects": false,
+    "main": "./dist/cjs/index.js",
+    "module": "./dist/esm/index.js",
+    "exports": {
+        ".": {
+            "types": "./dist/types/index.d.ts",
+            "require": "./dist/cjs/index.js",
+            "import": "./dist/esm/index.js",
+            "default": "./dist/esm/index.js"
+        },
+        "./plugins/core": {
+            "types": "./dist/types/index.d.ts",
+            "require": "./dist/cjs/index.js",
+            "import": "./dist/esm/index.js",
+            "default": "./dist/esm/index.js"
+        },
+        "./plugins/utils": {
+            "types": "./dist/types/plugins/utils/index.d.ts",
+            "require": "./dist/cjs/plugins/utils/index.js",
+            "import": "./dist/esm/plugins/utils/index.js",
+            "default": "./dist/esm/plugins/utils/index.js"
+        },
+        "./plugins/backup": {
+            "types": "./dist/types/plugins/backup/index.d.ts",
+            "require": "./dist/cjs/plugins/backup/index.js",
+            "import": "./dist/esm/plugins/backup/index.js",
+            "default": "./dist/esm/plugins/backup/index.js"
+        },
+        "./plugins/cleanup": {
+            "types": "./dist/types/plugins/cleanup/index.d.ts",
+            "require": "./dist/cjs/plugins/cleanup/index.js",
+            "import": "./dist/esm/plugins/cleanup/index.js",
+            "default": "./dist/esm/plugins/cleanup/index.js"
+        },
+        "./plugins/crdt": {
+            "types": "./dist/types/plugins/crdt/index.d.ts",
+            "require": "./dist/cjs/plugins/crdt/index.js",
+            "import": "./dist/esm/plugins/crdt/index.js",
+            "default": "./dist/esm/plugins/crdt/index.js"
+        },
+        "./plugins/dev-mode": {
+            "types": "./dist/types/plugins/dev-mode/index.d.ts",
+            "require": "./dist/cjs/plugins/dev-mode/index.js",
+            "import": "./dist/esm/plugins/dev-mode/index.js",
+            "default": "./dist/esm/plugins/dev-mode/index.js"
+        },
+        "./plugins/storage-dexie": {
+            "types": "./dist/types/plugins/storage-dexie/index.d.ts",
+            "require": "./dist/cjs/plugins/storage-dexie/index.js",
+            "import": "./dist/esm/plugins/storage-dexie/index.js",
+            "default": "./dist/esm/plugins/storage-dexie/index.js"
+        },
+        "./plugins/electron": {
+            "types": "./dist/types/plugins/electron/index.d.ts",
+            "require": "./dist/cjs/plugins/electron/index.js",
+            "import": "./dist/esm/plugins/electron/index.js",
+            "default": "./dist/esm/plugins/electron/index.js"
+        },
+        "./plugins/flutter": {
+            "types": "./dist/types/plugins/flutter/index.d.ts",
+            "require": "./dist/cjs/plugins/flutter/index.js",
+            "import": "./dist/esm/plugins/flutter/index.js",
+            "default": "./dist/esm/plugins/flutter/index.js"
+        },
+        "./plugins/storage-foundationdb": {
+            "types": "./dist/types/plugins/storage-foundationdb/index.d.ts",
+            "require": "./dist/cjs/plugins/storage-foundationdb/index.js",
+            "import": "./dist/esm/plugins/storage-foundationdb/index.js",
+            "default": "./dist/esm/plugins/storage-foundationdb/index.js"
+        },
+        "./plugins/local-documents": {
+            "types": "./dist/types/plugins/local-documents/index.d.ts",
+            "require": "./dist/cjs/plugins/local-documents/index.js",
+            "import": "./dist/esm/plugins/local-documents/index.js",
+            "default": "./dist/esm/plugins/local-documents/index.js"
+        },
+        "./plugins/storage-lokijs": {
+            "types": "./dist/types/plugins/storage-lokijs/index.d.ts",
+            "require": "./dist/cjs/plugins/storage-lokijs/index.js",
+            "import": "./dist/esm/plugins/storage-lokijs/index.js",
+            "default": "./dist/esm/plugins/storage-lokijs/index.js"
+        },
+        "./plugins/storage-memory": {
+            "types": "./dist/types/plugins/storage-memory/index.d.ts",
+            "require": "./dist/cjs/plugins/storage-memory/index.js",
+            "import": "./dist/esm/plugins/storage-memory/index.js",
+            "default": "./dist/esm/plugins/storage-memory/index.js"
+        },
+        "./plugins/storage-mongodb": {
+            "types": "./dist/types/plugins/storage-mongodb/index.d.ts",
+            "require": "./dist/cjs/plugins/storage-mongodb/index.js",
+            "import": "./dist/esm/plugins/storage-mongodb/index.js",
+            "default": "./dist/esm/plugins/storage-mongodb/index.js"
+        },
+        "./plugins/storage-denokv": {
+            "types": "./dist/types/plugins/storage-denokv/index.d.ts",
+            "require": "./dist/cjs/plugins/storage-denokv/index.js",
+            "import": "./dist/esm/plugins/storage-denokv/index.js",
+            "default": "./dist/esm/plugins/storage-denokv/index.js"
+        },
+        "./plugins/migration-schema": {
+            "types": "./dist/types/plugins/migration-schema/index.d.ts",
+            "require": "./dist/cjs/plugins/migration-schema/index.js",
+            "import": "./dist/esm/plugins/migration-schema/index.js",
+            "default": "./dist/esm/plugins/migration-schema/index.js"
+        },
+        "./plugins/migration-storage": {
+            "types": "./dist/types/plugins/migration-storage/index.d.ts",
+            "require": "./dist/cjs/plugins/migration-storage/index.js",
+            "import": "./dist/esm/plugins/migration-storage/index.js",
+            "default": "./dist/esm/plugins/migration-storage/index.js"
+        },
+        "./plugins/query-builder": {
+            "types": "./dist/types/plugins/query-builder/index.d.ts",
+            "require": "./dist/cjs/plugins/query-builder/index.js",
+            "import": "./dist/esm/plugins/query-builder/index.js",
+            "default": "./dist/esm/plugins/query-builder/index.js"
+        },
+        "./plugins/replication": {
+            "types": "./dist/types/plugins/replication/index.d.ts",
+            "require": "./dist/cjs/plugins/replication/index.js",
+            "import": "./dist/esm/plugins/replication/index.js",
+            "default": "./dist/esm/plugins/replication/index.js"
+        },
+        "./plugins/replication-graphql": {
+            "types": "./dist/types/plugins/replication-graphql/index.d.ts",
+            "require": "./dist/cjs/plugins/replication-graphql/index.js",
+            "import": "./dist/esm/plugins/replication-graphql/index.js",
+            "default": "./dist/esm/plugins/replication-graphql/index.js"
+        },
+        "./plugins/replication-webrtc": {
+            "types": "./dist/types/plugins/replication-webrtc/index.d.ts",
+            "require": "./dist/cjs/plugins/replication-webrtc/index.js",
+            "import": "./dist/esm/plugins/replication-webrtc/index.js",
+            "default": "./dist/esm/plugins/replication-webrtc/index.js"
+        },
+        "./plugins/replication-websocket": {
+            "types": "./dist/types/plugins/replication-websocket/index.d.ts",
+            "require": "./dist/cjs/plugins/replication-websocket/index.js",
+            "import": "./dist/esm/plugins/replication-websocket/index.js",
+            "default": "./dist/esm/plugins/replication-websocket/index.js"
+        },
+        "./plugins/storage-remote": {
+            "types": "./dist/types/plugins/storage-remote/index.d.ts",
+            "require": "./dist/cjs/plugins/storage-remote/index.js",
+            "import": "./dist/esm/plugins/storage-remote/index.js",
+            "default": "./dist/esm/plugins/storage-remote/index.js"
+        },
+        "./plugins/storage-remote-websocket": {
+            "types": "./dist/types/plugins/storage-remote-websocket/index.d.ts",
+            "require": "./dist/cjs/plugins/storage-remote-websocket/index.js",
+            "import": "./dist/esm/plugins/storage-remote-websocket/index.js",
+            "default": "./dist/esm/plugins/storage-remote-websocket/index.js"
+        },
+        "./plugins/attachments": {
+            "types": "./dist/types/plugins/attachments/index.d.ts",
+            "require": "./dist/cjs/plugins/attachments/index.js",
+            "import": "./dist/esm/plugins/attachments/index.js",
+            "default": "./dist/esm/plugins/attachments/index.js"
+        },
+        "./plugins/attachments-compression": {
+            "types": "./dist/types/plugins/attachments-compression/index.d.ts",
+            "require": "./dist/cjs/plugins/attachments-compression/index.js",
+            "import": "./dist/esm/plugins/attachments-compression/index.js",
+            "default": "./dist/esm/plugins/attachments-compression/index.js"
+        },
+        "./plugins/json-dump": {
+            "types": "./dist/types/plugins/json-dump/index.d.ts",
+            "require": "./dist/cjs/plugins/json-dump/index.js",
+            "import": "./dist/esm/plugins/json-dump/index.js",
+            "default": "./dist/esm/plugins/json-dump/index.js"
+        },
+        "./plugins/key-compression": {
+            "types": "./dist/types/plugins/key-compression/index.d.ts",
+            "require": "./dist/cjs/plugins/key-compression/index.js",
+            "import": "./dist/esm/plugins/key-compression/index.js",
+            "default": "./dist/esm/plugins/key-compression/index.js"
+        },
+        "./plugins/leader-election": {
+            "types": "./dist/types/plugins/leader-election/index.d.ts",
+            "require": "./dist/cjs/plugins/leader-election/index.js",
+            "import": "./dist/esm/plugins/leader-election/index.js",
+            "default": "./dist/esm/plugins/leader-election/index.js"
+        },
+        "./plugins/replication-couchdb": {
+            "types": "./dist/types/plugins/replication-couchdb/index.d.ts",
+            "require": "./dist/cjs/plugins/replication-couchdb/index.js",
+            "import": "./dist/esm/plugins/replication-couchdb/index.js",
+            "default": "./dist/esm/plugins/replication-couchdb/index.js"
+        },
+        "./plugins/replication-nats": {
+            "types": "./dist/types/plugins/replication-nats/index.d.ts",
+            "require": "./dist/cjs/plugins/replication-nats/index.js",
+            "import": "./dist/esm/plugins/replication-nats/index.js",
+            "default": "./dist/esm/plugins/replication-nats/index.js"
+        },
+        "./plugins/update": {
+            "types": "./dist/types/plugins/update/index.d.ts",
+            "require": "./dist/cjs/plugins/update/index.js",
+            "import": "./dist/esm/plugins/update/index.js",
+            "default": "./dist/esm/plugins/update/index.js"
+        },
+        "./plugins/state": {
+            "types": "./dist/types/plugins/state/index.d.ts",
+            "require": "./dist/cjs/plugins/state/index.js",
+            "import": "./dist/esm/plugins/state/index.js",
+            "default": "./dist/esm/plugins/state/index.js"
+        },
+        "./plugins/validate-ajv": {
+            "types": "./dist/types/plugins/validate-ajv/index.d.ts",
+            "require": "./dist/cjs/plugins/validate-ajv/index.js",
+            "import": "./dist/esm/plugins/validate-ajv/index.js",
+            "default": "./dist/esm/plugins/validate-ajv/index.js"
+        },
+        "./plugins/validate-is-my-json-valid": {
+            "types": "./dist/types/plugins/validate-is-my-json-valid/index.d.ts",
+            "require": "./dist/cjs/plugins/validate-is-my-json-valid/index.js",
+            "import": "./dist/esm/plugins/validate-is-my-json-valid/index.js",
+            "default": "./dist/esm/plugins/validate-is-my-json-valid/index.js"
+        },
+        "./plugins/validate-z-schema": {
+            "types": "./dist/types/plugins/validate-z-schema/index.d.ts",
+            "require": "./dist/cjs/plugins/validate-z-schema/index.js",
+            "import": "./dist/esm/plugins/validate-z-schema/index.js",
+            "default": "./dist/esm/plugins/validate-z-schema/index.js"
+        },
+        "./plugins/test-utils": {
+            "types": "./dist/types/plugins/test-utils/index.d.ts",
+            "require": "./dist/cjs/plugins/test-utils/index.js",
+            "import": "./dist/esm/plugins/test-utils/index.js",
+            "default": "./dist/esm/plugins/test-utils/index.js"
+        },
+        "./package.json": "./package.json"
+    },
+    "scripts": {
+        "postinstall": "node scripts/postinstall.js || echo \"ignore\"",
+        "test": "npm run test:node && npm run test:browser",
+        "// test:fast": "run tests in the fast-mode. Most of them will run in parrallel, skips tests that are known slow",
+        "test:fast": "npm run test:fast:memory && npm run test:fast:lokijs && npm run test:fast:dexie",
+        "test:fast:memory": "npm run transpile && cross-env DEFAULT_STORAGE=memory NODE_ENV=fast mocha --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
+        "test:fast:memory-validation": "npm run transpile && cross-env DEFAULT_STORAGE=memory-validation NODE_ENV=fast mocha --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
+        "test:fast:memory-random-delay": "npm run transpile && cross-env DEFAULT_STORAGE=memory-random-delay NODE_ENV=fast mocha --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
+        "test:fast:lokijs": "npm run transpile && cross-env DEFAULT_STORAGE=lokijs NODE_ENV=fast mocha --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
+        "test:fast:dexie": "npm run transpile && cross-env DEFAULT_STORAGE=dexie NODE_ENV=fast mocha --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
+        "test:fast:foundationdb": "npm run transpile && cross-env DEFAULT_STORAGE=foundationdb NODE_ENV=fast mocha --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
+        "test:fast:mongodb": "npm run transpile && cross-env DEFAULT_STORAGE=mongodb NODE_ENV=fast mocha --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
+        "// test:fast:loop": "runs tests in the fast-mode in a loop. Use this to debug tests that only fail sometimes",
+        "test:fast:loop": "npm run test:fast && npm run test:fast:loop",
+        "test:fast:loop:lokijs": "npm run test:fast:lokijs && npm run test:fast:loop:lokijs",
+        "test:fast:loop:memory": "npm run test:fast:memory && npm run test:fast:loop:memory",
+        "test:fast:loop:dexie": "npm run test:fast:dexie && npm run test:fast:loop:dexie",
+        "test:fast:loop:mongodb": "npm run test:fast:mongodb && npm run test:fast:loop:mongodb",
+        "test:fast:loop:memory-random-delay": "npm run test:fast:memory-random-delay && npm run test:fast:loop:memory-random-delay",
+        "test:node": "npm run test:node:lokijs && npm run test:node:dexie",
+        "test:node:memory": "npm run transpile && cross-env DEFAULT_STORAGE=memory mocha --expose-gc --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
+        "test:node:memory-validation": "npm run transpile && cross-env DEFAULT_STORAGE=memory-validation mocha --expose-gc --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
+        "test:node:memory-random-delay": "npm run transpile && cross-env DEFAULT_STORAGE=memory-random-delay mocha --expose-gc --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
+        "test:node:lokijs": "npm run transpile && cross-env DEFAULT_STORAGE=lokijs mocha --expose-gc --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
+        "test:node:dexie": "npm run transpile && cross-env DEFAULT_STORAGE=dexie mocha --expose-gc --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
+        "test:bun:dexie": "npm run transpile && cross-env DEFAULT_STORAGE=dexie NODE_ENV=fast bun run ./node_modules/mocha/bin/mocha test_tmp/unit.test.js --bail",
+        "test:deno:dexie": "npm run transpile && cross-env DEFAULT_STORAGE=dexie deno run --unstable --allow-env --unstable-byonm --allow-read -A npm:mocha ./test/unit.test.ts --bail",
+        "test:deno:denokv": "npm run transpile && cross-env DEFAULT_STORAGE=denokv deno run --unstable --allow-env --unstable-byonm --allow-read -A npm:mocha ./test/unit.test.ts --bail",
+        "test:deno:denokv:loop": "npm run test:deno:denokv && npm run test:deno:denokv:loop",
+        "test:deno:memory": "npm run transpile && cross-env DEFAULT_STORAGE=memory deno run --unstable --allow-env --unstable-byonm --allow-read -A npm:mocha ./test/unit.test.ts --bail",
+        "test:node:foundationdb": "npm run transpile && cross-env DEFAULT_STORAGE=foundationdb mocha --expose-gc --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
+        "test:node:mongodb": "npm run transpile && cross-env DEFAULT_STORAGE=mongodb mocha --expose-gc --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
+        "test:node:mongodb:loop": "npm run test:node:mongodb && npm run test:node:mongodb:loop",
+        "test:node:remote": "npm run transpile && cross-env DEFAULT_STORAGE=remote mocha --expose-gc --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
+        "test:node:remote:loop": "npm run test:node:remote && npm run test:node:remote:loop",
+        "test:node:lokijs:loop": "npm run test:node:lokijs && npm run test:node:lokijs:loop",
+        "test:node:memory:loop": "npm run test:node:memory && npm run test:node:memory:loop",
+        "test:node:dexie:loop": "npm run test:node:dexie && npm run test:node:dexie:loop",
+        "test:node:foundationdb:loop": "npm run test:node:foundationdb && npm run test:node:foundationdb:loop",
+        "test:node:custom": "npm run transpile && cross-env DEFAULT_STORAGE=custom mocha --expose-gc --config ./config/.mocharc.cjs ./test_tmp/unit.test.js",
+        "// test:node:loop": "runs tests in node in a loop. Use this to debug tests that only fail sometimes",
+        "test:node:loop": "npm run test:node && npm run test:node:loop",
+        "test:node:loop:memory-random-delay": "npm run test:node:memory-random-delay && npm run test:node:loop:memory-random-delay",
+        "test:browser:loop": "npm run test:browser && npm run test:browser:loop",
+        "test:browser:lokijs": " npm run transpile && cross-env CI=true DEFAULT_STORAGE=lokijs  karma start ./config/karma.conf.cjs --single-run",
+        "test:browser:memory": " npm run transpile && cross-env CI=true DEFAULT_STORAGE=memory  karma start ./config/karma.conf.cjs --single-run",
+        "test:browser:memory:loop": "npm run test:browser:memory && npm run test:browser:memory:loop",
+        "test:browser:dexie": "  npm run transpile && cross-env CI=true DEFAULT_STORAGE=dexie   karma start ./config/karma.conf.cjs --single-run",
+        "test:browser:remote": "  npm run transpile && cross-env CI=true DEFAULT_STORAGE=remote karma start ./config/karma.conf.cjs --single-run",
+        "test:browser:remote:loop": "npm run test:browser:remote && npm run test:browser:remote:loop",
+        "test:browser:custom": " npm run transpile && cross-env CI=true DEFAULT_STORAGE=custom  karma start ./config/karma.conf.cjs --single-run",
+        "test:replication-couchdb": "npm run transpile && concurrently \"npm run couch:start\" \"cross-env NATIVE_COUCHDB=5984 DEFAULT_STORAGE=dexie mocha --config ./config/.mocharc.cjs ./test_tmp/replication-couchdb.test.js\" --success first --kill-others",
+        "test:replication-nats": "npm run transpile && concurrently \"npm run nats:start\" \"cross-env DEFAULT_STORAGE=dexie mocha --config ./config/.mocharc.cjs ./test_tmp/replication-nats.test.js\" --success first --kill-others",
+        "test:core": "npm run transpile && mocha ./test_tmp/unit/core.node.js",
+        "test:full": "npm run transpile && mocha ./test_tmp/unit/full.node.js",
+        "test:typings": "npm run build:plugins && tsc --allowImportingTsExtensions --noEmit --skipLibCheck --lib \"ES2022,DOM\" ./test/typings.test.ts",
+        "test:deps": "npm run build && dependency-check ./package.json ./dist/cjs/index.js ./dist/cjs/plugins/validate-is-my-json-valid/index.js ./dist/cjs/plugins/attachments-compression/index.js ./dist/cjs/plugins/validate-ajv/index.js ./dist/cjs/plugins/update/index.js ./dist/cjs/plugins/key-compression/index.js ./dist/cjs/plugins/dev-mode/index.js ./dist/cjs/plugins/replication-graphql/index.js ./dist/cjs/plugins/replication-webrtc/index.js ./dist/cjs/plugins/replication-websocket/index.js  ./dist/cjs/plugins/replication-nats/index.js ./dist/cjs/plugins/validate-z-schema/index.js ./dist/cjs/plugins/storage-lokijs/index.js ./dist/cjs/plugins/storage-dexie/index.js ./dist/cjs/plugins/storage-memory/index.js ./dist/cjs/plugins/storage-mongodb/index.js --no-dev --ignore-module util --ignore-module url --ignore-module ws --ignore-module graphql --ignore-module as-typed --ignore-module \"@types/*\"",
+        "test:circular": "npm run build && madge --circular ./dist/esm/index.js && madge --circular ./dist/esm/plugins/storage-dexie/index.js",
+        "test:performance:lokijs:browser": "npm run transpile && cross-env DEFAULT_STORAGE=lokijs CI=true karma start ./config/karma.performance.conf.cjs --single-run",
+        "test:performance:lokijs:node": "npm run transpile && cross-env DEFAULT_STORAGE=lokijs mocha --config ./config/.mocharc.cjs ./test_tmp/performance.test.js --unhandled-rejections=strict --expose-gc",
+        "test:performance:dexie": "npm run transpile && cross-env DEFAULT_STORAGE=dexie CI=true karma start ./config/karma.performance.conf.cjs --single-run",
+        "test:performance:memory:browser": "npm run transpile && cross-env DEFAULT_STORAGE=memory CI=true karma start ./config/karma.performance.conf.cjs --single-run",
+        "test:performance:memory:node": "npm run transpile && cross-env DEFAULT_STORAGE=memory mocha --config ./config/.mocharc.cjs ./test_tmp/performance.test.js --unhandled-rejections=strict --expose-gc",
+        "test:performance:memory:bun": "npm run transpile && cross-env DEFAULT_STORAGE=memory bun run ./node_modules/mocha/bin/mocha test_tmp/performance.test.js --bail",
+        "test:performance:memory:deno": "npm run transpile && cross-env DEFAULT_STORAGE=memory deno run --unstable --allow-env --allow-read -A npm:mocha test/performance.test.ts --bail",
+        "test:performance:foundationdb": "npm run transpile && cross-env DEFAULT_STORAGE=foundationdb mocha --config ./config/.mocharc.cjs ./test_tmp/performance.test.js --unhandled-rejections=strict --expose-gc",
+        "test:performance:mongodb": "npm run transpile && cross-env DEFAULT_STORAGE=mongodb mocha --config ./config/.mocharc.cjs ./test_tmp/performance.test.js --unhandled-rejections=strict --expose-gc",
+        "test:performance:custom:browser": "npm run transpile && cross-env DEFAULT_STORAGE=custom CI=true karma start ./config/karma.performance.conf.cjs --single-run",
+        "test:performance:custom:node": "npm run transpile && cross-env DEFAULT_STORAGE=custom mocha --config ./config/.mocharc.cjs ./test_tmp/performance.test.js --unhandled-rejections=strict --expose-gc",
+        "test:performance": "npm run build && npm run test:performance:lokijs:browser && npm run test:performance:lokijs:node && npm run test:performance:dexie && npm run test:performance:memory:browser && npm run test:performance:memory:node",
+        "test:query-correctness-fuzzing:memory:node": "npm run transpile && cross-env DEFAULT_STORAGE=memory mocha --config ./config/.mocharc.cjs ./test_tmp/query-correctness-fuzzing.test.js --unhandled-rejections=strict --expose-gc",
+        "test:query-correctness-fuzzing:custom:node": "npm run transpile && cross-env DEFAULT_STORAGE=custom mocha --config ./config/.mocharc.cjs ./test_tmp/query-correctness-fuzzing.test.js --unhandled-rejections=strict --expose-gc",
+        "test:query-correctness-fuzzing:lokijs:node": "npm run transpile && cross-env DEFAULT_STORAGE=lokijs mocha --config ./config/.mocharc.cjs ./test_tmp/query-correctness-fuzzing.test.js --unhandled-rejections=strict --expose-gc",
+        "couch:start": "docker run -p 5984:5984 -e COUCHDB_USER=root -e COUCHDB_PASSWORD=root --rm --name rxdb-couchdb couchdb:3.3.3",
+        "couch:stop": "docker rm -f rxdb-couchdb",
+        "mongodb:start": "docker run -p 27017:27017 -p 27018:27018 -p 27019:27019 --rm --name rxdb-mongodb mongo:7.0.1",
+        "mongodb:stop": "docker rm -f rxdb-mongodb",
+        "nats:start": "docker run --rm --name rxdb-nats -p 4222:4222 nats:2.9.17 -js",
+        "nats:stop": "docker rm -f rxdb-nats",
+        "dockertest": "docker run -it -v $(pwd):/usr/src/app markadams/chromium-xvfb-js:latest-onbuild",
+        "profile": "npm run transpile && rm -f isolate-* && cross-env DEFAULT_STORAGE=memory NODE_PROF=true mocha --config ./config/.mocharc.cjs ./test_tmp/performance.test.js --v8-prof --expose-gc && node scripts/profile.mjs",
+        "clear": "rimraf -rf test_tmp/ && rimraf -rf dist/ && rimraf .transpile_state.json",
+        "lint": "eslint . --ext .js,.ts --cache",
+        "lint:fix": "eslint --fix . --ext .js,.ts",
+        "lint:debug:files": "DEBUG=eslint:cli-engine eslint --ext .js,.ts,.json .",
+        "lint:debug:time": "TIMING=1 eslint --ext .js,.ts,.json .",
+        "check-types": "tsc",
+        "transpile": "npm run build:version && node scripts/transpile.mjs && echo '{ \"type\": \"module\" }' > test_tmp/package.json",
+        "build:version": "node ./scripts/update-version-variable.mjs",
+        "build:esm": "npm run build:version && rimraf -rf --max-retries=3 dist/esm && cross-env NODE_ENV=es6 babel src --out-dir dist/esm --source-maps --extensions \".ts,.js\" && echo '{ \"type\": \"module\", \"sideEffects\": false }' > dist/esm/package.json",
+        "build:types": "npm run build:version && rimraf -rf --max-retries=3 ./dist/types && tsc --project ./config/tsconfig.types.json && cp -r ./src/types ./dist/types/types && node ./scripts/fix-types.mjs",
+        "build": "npm run clear && npm run build:version && concurrently \"npm run transpile\" \"npm run build:esm\" \"npm run build:types\" \"npm run build:plugins\"",
+        "build:plugins": "node ./scripts/generate-plugins-package-json.mjs",
+        "build:webpack": "npm run build && cross-env NODE_ENV=build webpack --config ./config/webpack.config.js",
+        "build:rollup": "npm run build && rollup --config ./config/rollup.config.mjs",
+        "build:size": "npm run build:webpack && echo \"Build-Size (minified+gzip):\" && gzip-size --raw ./test_tmp/webpack.bundle.js",
+        "docs:install": "(cd docs-src/ && npm install)",
+        "// docs:serve": "start a local server to watch the docs. Served at http://localhost:4000/",
+        "docs:serve": "(cd docs-src/ && npm start)",
+        "docs:build": "rimraf -rf ./docs && mkdir ./docs && (cd docs-src/ && npm run build) && cp -r ./docs-src/build/* ./docs && cp ./docs-src/CNAME ./docs/CNAME",
+        "docs:remove:time": "node ./scripts/docs-remove-time.mjs",
+        "disc": "npm run transpile && npm run build:esm && cross-env NODE_ENV=disc webpack --config ./config/webpack.config.js",
+        "preversion": "npm run lint && npm run test",
+        "dev": "watch 'npm run test:node:memory' src/ test/",
+        "dev:example": "watch 'npm run transpile:src && echo \"done\"' src/ test/",
+        "cloud-signaling-server": "node ./scripts/start-cloud-signaling-server.mjs --max-old-space-size=2048"
+    },
+    "pre-commit": [
+        "lint"
+    ],
+    "peerDependencies": {
+        "rxjs": "^7.8.0"
+    },
+    "dependencies": {
+        "@babel/runtime": "7.24.7",
+        "@types/clone": "2.1.4",
+        "@types/cors": "2.8.17",
+        "@types/express": "4.17.21",
+        "@types/simple-peer": "9.11.8",
+        "@types/ws": "8.5.10",
+        "ajv": "8.16.0",
+        "array-push-at-sort-position": "4.0.1",
+        "as-typed": "1.3.2",
+        "broadcast-channel": "7.0.0",
+        "custom-idle-queue": "3.0.1",
+        "dexie": "4.0.7",
+        "event-reduce-js": "5.2.7",
+        "get-graphql-from-jsonschema": "8.1.0",
+        "graphql": "15.8.0",
+        "graphql-ws": "5.16.0",
+        "is-my-json-valid": "2.20.6",
+        "isomorphic-ws": "5.0.0",
+        "js-base64": "3.7.7",
+        "jsonschema-key-compression": "1.7.0",
+        "lokijs": "1.5.12",
+        "mingo": "6.4.13",
+        "mongodb": "6.7.0",
+        "nats": "2.26.0",
+        "oblivious-set": "1.4.0",
+        "ohash": "1.1.3",
+        "reconnecting-websocket": "4.4.0",
+        "simple-peer": "9.11.1",
+        "unload": "2.4.1",
+        "util": "0.12.5",
+        "ws": "8.16.0",
+        "z-schema": "6.0.1"
+    },
+    "devDependencies": {
+        "@babel/cli": "7.24.7",
+        "@babel/core": "7.24.7",
+        "@babel/plugin-external-helpers": "7.24.7",
+        "@babel/plugin-proposal-class-properties": "7.18.6",
+        "@babel/plugin-proposal-object-rest-spread": "7.20.7",
+        "@babel/plugin-transform-literals": "7.24.7",
+        "@babel/plugin-transform-member-expression-literals": "7.24.7",
+        "@babel/plugin-transform-modules-commonjs": "7.24.7",
+        "@babel/plugin-transform-property-literals": "7.24.7",
+        "@babel/plugin-transform-runtime": "7.24.7",
+        "@babel/plugin-transform-spread": "7.24.7",
+        "@babel/plugin-transform-template-literals": "7.24.7",
+        "@babel/plugin-transform-typescript": "7.24.7",
+        "@babel/polyfill": "7.12.1",
+        "@babel/preset-env": "7.24.7",
+        "@babel/preset-typescript": "7.24.7",
+        "@babel/types": "7.24.7",
+        "@faker-js/faker": "8.4.1",
+        "@rollup/plugin-commonjs": "25.0.8",
+        "@rollup/plugin-node-resolve": "15.2.3",
+        "@types/assert": "1.5.10",
+        "@types/core-js": "2.5.8",
+        "@types/cors": "2.8.17",
+        "@types/mocha": "10.0.6",
+        "@types/node": "20.14.2",
+        "@types/request": "2.48.12",
+        "@types/request-promise-native": "1.0.21",
+        "@types/source-map-support": "0.5.10",
+        "@typescript-eslint/eslint-plugin": "7.12.0",
+        "@typescript-eslint/parser": "7.12.0",
+        "assert": "2.1.0",
+        "async-test-util": "2.5.0",
+        "babel-loader": "9.1.3",
+        "babel-plugin-transform-class-properties": "6.24.1",
+        "brfs": "2.0.2",
+        "child-process-promise": "2.2.1",
+        "clone": "2.1.2",
+        "concurrently": "8.2.2",
+        "copy-webpack-plugin": "12.0.2",
+        "cors": "2.8.5",
+        "cross-env": "7.0.3",
+        "delete": "1.1.0",
+        "dependency-check": "4.1.0",
+        "disc": "1.3.3",
+        "eslint": "8.57.0",
+        "eslint-plugin-import": "2.29.1",
+        "eslint-plugin-jsdoc": "48.2.9",
+        "exists-file": "3.0.2",
+        "express": "4.19.2",
+        "express-graphql": "0.12.0",
+        "fake-indexeddb": "6.0.0",
+        "get-port": "5.1.1",
+        "graphql-subscriptions": "2.0.0",
+        "gzip-size-cli": "5.1.0",
+        "html-webpack-plugin": "5.6.0",
+        "karma": "6.4.3",
+        "karma-babel-preprocessor": "8.0.2",
+        "karma-chrome-launcher": "3.2.0",
+        "karma-coverage": "2.2.1",
+        "karma-detect-browsers": "2.3.3",
+        "karma-firefox-launcher": "2.1.3",
+        "karma-ie-launcher": "1.0.0",
+        "karma-mocha": "2.0.1",
+        "karma-opera-launcher": "1.0.0",
+        "karma-safari-launcher": "1.0.0",
+        "karma-sourcemap-loader": "0.4.0",
+        "karma-spec-reporter": "0.0.36",
+        "karma-webpack": "5.0.1",
+        "leveldown": "6.1.1",
+        "madge": "7.0.0",
+        "mini-css-extract-plugin": "2.9.0",
+        "mocha": "10.4.0",
+        "mocha.parallel": "0.15.6",
+        "nconf": "0.12.1",
+        "node-datachannel": "0.9.1",
+        "node-pre-gyp": "0.17.0",
+        "pre-commit": "1.2.2",
+        "process": "0.11.10",
+        "querystring-es3": "0.2.1",
+        "random-int": "3.0.0",
+        "readline": "1.3.0",
+        "rimraf": "5.0.7",
+        "rollup": "4.18.0",
+        "rxdb-old": "npm:rxdb@14.17.1",
+        "rxjs": "7.8.1",
+        "shelljs": "0.8.5",
+        "source-map-support": "0.5.21",
+        "stream": "0.0.2",
+        "terser": "5.31.0",
+        "terser-webpack-plugin": "5.3.10",
+        "ts-loader": "9.5.1",
+        "ts-mocha": "10.0.0",
+        "typescript": "5.4.5",
+        "walk-sync": "3.0.0",
+        "watch": "1.0.2",
+        "webpack": "5.91.0",
+        "webpack-bundle-analyzer": "4.10.2",
+        "webpack-cli": "5.1.4",
+        "webpack-dev-server": "5.0.4"
+    }
 }
\ No newline at end of file
diff --git a/node_modules/rxdb/dist/cjs/plugins/encryption-crypto-js/index.js b/node_modules/rxdb/dist/cjs/plugins/encryption-crypto-js/index.js
deleted file mode 100644
index 6b6831e..0000000
--- a/node_modules/rxdb/dist/cjs/plugins/encryption-crypto-js/index.js
+++ /dev/null
@@ -1,147 +0,0 @@
-"use strict";
-
-var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
-exports.MINIMUM_PASSWORD_LENGTH = void 0;
-exports.decryptString = decryptString;
-exports.encryptString = encryptString;
-exports.wrappedKeyEncryptionCryptoJsStorage = wrappedKeyEncryptionCryptoJsStorage;
-var _cryptoJs = _interopRequireDefault(require("crypto-js"));
-var _pluginHelpers = require("../../plugin-helpers.js");
-var _rxError = require("../../rx-error.js");
-var _rxStorageHelper = require("../../rx-storage-helper.js");
-var _index = require("../../plugins/utils/index.js");
-/**
- * this plugin adds the encryption-capabilities to rxdb
- * It's using crypto-js/aes for password-encryption
- * @link https://github.com/brix/crypto-js
- */
-
-var {
-  AES,
-  enc: cryptoEnc
-} = _cryptoJs.default;
-var MINIMUM_PASSWORD_LENGTH = exports.MINIMUM_PASSWORD_LENGTH = 8;
-function encryptString(value, password) {
-  var encrypted = AES.encrypt(value, password);
-  return encrypted.toString();
-}
-function decryptString(cipherText, password) {
-  /**
-   * Trying to decrypt non-strings
-   * will cause no errors and will be hard to debug.
-   * So instead we do this check here.
-   */
-  if (typeof cipherText !== 'string') {
-    throw (0, _rxError.newRxError)('SNH', {
-      args: {
-        cipherText
-      }
-    });
-  }
-  var decrypted = AES.decrypt(cipherText, password);
-  var ret = decrypted.toString(cryptoEnc.Utf8);
-  return ret;
-}
-function wrappedKeyEncryptionCryptoJsStorage(args) {
-  return Object.assign({}, args.storage, {
-    async createStorageInstance(params) {
-      if (typeof params.password !== 'undefined') {
-        validatePassword(params.password);
-      }
-      if (!(0, _rxStorageHelper.hasEncryption)(params.schema)) {
-        var retInstance = await args.storage.createStorageInstance(params);
-        return retInstance;
-      }
-      if (!params.password) {
-        throw (0, _rxError.newRxError)('EN3', {
-          database: params.databaseName,
-          collection: params.collectionName,
-          schema: params.schema
-        });
-      }
-      var password = params.password;
-      var schemaWithoutEncrypted = (0, _index.clone)(params.schema);
-      delete schemaWithoutEncrypted.encrypted;
-      if (schemaWithoutEncrypted.attachments) {
-        schemaWithoutEncrypted.attachments.encrypted = false;
-      }
-      var instance = await args.storage.createStorageInstance(Object.assign({}, params, {
-        schema: schemaWithoutEncrypted
-      }));
-      function modifyToStorage(docData) {
-        docData = cloneWithoutAttachments(docData);
-        (0, _index.ensureNotFalsy)(params.schema.encrypted).forEach(path => {
-          var value = (0, _index.getProperty)(docData, path);
-          if (typeof value === 'undefined') {
-            return;
-          }
-          var stringValue = JSON.stringify(value);
-          var encrypted = encryptString(stringValue, password);
-          (0, _index.setProperty)(docData, path, encrypted);
-        });
-
-        // handle attachments
-        if (params.schema.attachments && params.schema.attachments.encrypted) {
-          var newAttachments = {};
-          Object.entries(docData._attachments).forEach(([id, attachment]) => {
-            var useAttachment = (0, _index.flatClone)(attachment);
-            if (useAttachment.data) {
-              var dataString = useAttachment.data;
-              useAttachment.data = (0, _index.b64EncodeUnicode)(encryptString(dataString, password));
-            }
-            newAttachments[id] = useAttachment;
-          });
-          docData._attachments = newAttachments;
-        }
-        return docData;
-      }
-      function modifyFromStorage(docData) {
-        docData = cloneWithoutAttachments(docData);
-        (0, _index.ensureNotFalsy)(params.schema.encrypted).forEach(path => {
-          var value = (0, _index.getProperty)(docData, path);
-          if (typeof value === 'undefined') {
-            return;
-          }
-          var decrypted = decryptString(value, password);
-          var decryptedParsed = JSON.parse(decrypted);
-          (0, _index.setProperty)(docData, path, decryptedParsed);
-        });
-        return docData;
-      }
-      function modifyAttachmentFromStorage(attachmentData) {
-        if (params.schema.attachments && params.schema.attachments.encrypted) {
-          var decrypted = decryptString((0, _index.b64DecodeUnicode)(attachmentData), password);
-          return decrypted;
-        } else {
-          return attachmentData;
-        }
-      }
-      return (0, _pluginHelpers.wrapRxStorageInstance)(params.schema, instance, modifyToStorage, modifyFromStorage, modifyAttachmentFromStorage);
-    }
-  });
-}
-function cloneWithoutAttachments(data) {
-  var attachments = data._attachments;
-  data = (0, _index.flatClone)(data);
-  delete data._attachments;
-  data = (0, _index.clone)(data);
-  data._attachments = attachments;
-  return data;
-}
-function validatePassword(password) {
-  if (typeof password !== 'string') {
-    throw (0, _rxError.newRxTypeError)('EN1', {
-      password
-    });
-  }
-  if (password.length < MINIMUM_PASSWORD_LENGTH) {
-    throw (0, _rxError.newRxError)('EN2', {
-      minPassLength: MINIMUM_PASSWORD_LENGTH,
-      password
-    });
-  }
-}
-//# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/rxdb/dist/cjs/plugins/encryption-crypto-js/index.js.map b/node_modules/rxdb/dist/cjs/plugins/encryption-crypto-js/index.js.map
deleted file mode 100644
index 1267b8e..0000000
--- a/node_modules/rxdb/dist/cjs/plugins/encryption-crypto-js/index.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"index.js","names":["_cryptoJs","_interopRequireDefault","require","_pluginHelpers","_rxError","_rxStorageHelper","_index","AES","enc","cryptoEnc","pkg","MINIMUM_PASSWORD_LENGTH","exports","encryptString","value","password","encrypted","encrypt","toString","decryptString","cipherText","newRxError","args","decrypted","decrypt","ret","Utf8","wrappedKeyEncryptionCryptoJsStorage","Object","assign","storage","createStorageInstance","params","validatePassword","hasEncryption","schema","retInstance","database","databaseName","collection","collectionName","schemaWithoutEncrypted","clone","attachments","instance","modifyToStorage","docData","cloneWithoutAttachments","ensureNotFalsy","forEach","path","getProperty","stringValue","JSON","stringify","setProperty","newAttachments","entries","_attachments","id","attachment","useAttachment","flatClone","data","dataString","b64EncodeUnicode","modifyFromStorage","decryptedParsed","parse","modifyAttachmentFromStorage","attachmentData","b64DecodeUnicode","wrapRxStorageInstance","newRxTypeError","length","minPassLength"],"sources":["../../../../src/plugins/encryption-crypto-js/index.ts"],"sourcesContent":["/**\n * this plugin adds the encryption-capabilities to rxdb\n * It's using crypto-js/aes for password-encryption\n * @link https://github.com/brix/crypto-js\n */\nimport pkg from 'crypto-js';\nconst { AES, enc: cryptoEnc } = pkg;\n\nimport { wrapRxStorageInstance } from '../../plugin-helpers.ts';\nimport { newRxError, newRxTypeError } from '../../rx-error.ts';\nimport { hasEncryption } from '../../rx-storage-helper.ts';\nimport type {\n    InternalStoreDocType,\n    RxAttachmentWriteData,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstanceCreationParams\n} from '../../types/index.d.ts';\nimport {\n    b64DecodeUnicode,\n    b64EncodeUnicode,\n    clone,\n    ensureNotFalsy,\n    flatClone,\n    getProperty,\n    setProperty\n} from '../../plugins/utils/index.ts';\n\nexport const MINIMUM_PASSWORD_LENGTH: 8 = 8;\n\n\nexport function encryptString(value: string, password: string): string {\n    const encrypted = AES.encrypt(value, password);\n    return encrypted.toString();\n}\n\nexport function decryptString(cipherText: string, password: any): string {\n    /**\n     * Trying to decrypt non-strings\n     * will cause no errors and will be hard to debug.\n     * So instead we do this check here.\n     */\n    if (typeof cipherText !== 'string') {\n        throw newRxError('SNH', {\n            args: {\n                cipherText\n            }\n        });\n    }\n\n    const decrypted = AES.decrypt(cipherText, password);\n    const ret = decrypted.toString(cryptoEnc.Utf8);\n    return ret;\n}\n\nexport type InternalStorePasswordDocType = InternalStoreDocType<{\n    hash: string;\n}>;\n\nexport function wrappedKeyEncryptionCryptoJsStorage<Internals, InstanceCreationOptions>(\n    args: {\n        storage: RxStorage<Internals, InstanceCreationOptions>;\n    }\n): RxStorage<Internals, InstanceCreationOptions> {\n    return Object.assign(\n        {},\n        args.storage,\n        {\n            async createStorageInstance<RxDocType>(\n                params: RxStorageInstanceCreationParams<RxDocType, any>\n            ) {\n                if (typeof params.password !== 'undefined') {\n                    validatePassword(params.password as any);\n                }\n\n                if (!hasEncryption(params.schema)) {\n                    const retInstance = await args.storage.createStorageInstance(params);\n                    return retInstance;\n                }\n\n                if (!params.password) {\n                    throw newRxError('EN3', {\n                        database: params.databaseName,\n                        collection: params.collectionName,\n                        schema: params.schema\n                    });\n                }\n                const password = params.password;\n\n                const schemaWithoutEncrypted: RxJsonSchema<RxDocumentData<RxDocType>> = clone(params.schema);\n                delete schemaWithoutEncrypted.encrypted;\n                if (schemaWithoutEncrypted.attachments) {\n                    schemaWithoutEncrypted.attachments.encrypted = false;\n                }\n\n                const instance = await args.storage.createStorageInstance(\n                    Object.assign(\n                        {},\n                        params,\n                        {\n                            schema: schemaWithoutEncrypted\n                        }\n                    )\n                );\n\n                function modifyToStorage(docData: RxDocumentWriteData<RxDocType>) {\n                    docData = cloneWithoutAttachments(docData);\n                    ensureNotFalsy(params.schema.encrypted)\n                        .forEach(path => {\n                            const value = getProperty(docData, path);\n                            if (typeof value === 'undefined') {\n                                return;\n                            }\n\n                            const stringValue = JSON.stringify(value);\n                            const encrypted = encryptString(stringValue, password);\n                            setProperty(docData, path, encrypted);\n                        });\n\n                    // handle attachments\n                    if (\n                        params.schema.attachments &&\n                        params.schema.attachments.encrypted\n                    ) {\n                        const newAttachments: typeof docData._attachments = {};\n                        Object.entries(docData._attachments).forEach(([id, attachment]) => {\n                            const useAttachment: RxAttachmentWriteData = flatClone(attachment) as any;\n                            if (useAttachment.data) {\n                                const dataString = useAttachment.data;\n                                useAttachment.data = b64EncodeUnicode(encryptString(dataString, password));\n                            }\n                            newAttachments[id] = useAttachment;\n                        });\n                        docData._attachments = newAttachments;\n                    }\n                    return docData;\n                }\n                function modifyFromStorage(docData: RxDocumentData<any>): Promise<RxDocumentData<RxDocType>> {\n                    docData = cloneWithoutAttachments(docData);\n                    ensureNotFalsy(params.schema.encrypted)\n                        .forEach(path => {\n                            const value = getProperty(docData, path);\n                            if (typeof value === 'undefined') {\n                                return;\n                            }\n                            const decrypted = decryptString(value, password);\n                            const decryptedParsed = JSON.parse(decrypted);\n                            setProperty(docData, path, decryptedParsed);\n                        });\n                    return docData;\n                }\n\n                function modifyAttachmentFromStorage(attachmentData: string): string {\n                    if (\n                        params.schema.attachments &&\n                        params.schema.attachments.encrypted\n                    ) {\n                        const decrypted = decryptString(b64DecodeUnicode(attachmentData), password);\n                        return decrypted;\n                    } else {\n                        return attachmentData;\n                    }\n                }\n\n                return wrapRxStorageInstance(\n                    params.schema,\n                    instance,\n                    modifyToStorage,\n                    modifyFromStorage,\n                    modifyAttachmentFromStorage\n                );\n            }\n        }\n    );\n}\n\n\n\n\n\nfunction cloneWithoutAttachments<T>(data: RxDocumentWriteData<T>): RxDocumentData<T> {\n    const attachments = data._attachments;\n    data = flatClone(data);\n    delete (data as any)._attachments;\n    data = clone(data);\n    data._attachments = attachments;\n    return data as any;\n}\n\nfunction validatePassword(password: string) {\n    if (typeof password !== 'string') {\n        throw newRxTypeError('EN1', {\n            password\n        });\n    }\n    if (password.length < MINIMUM_PASSWORD_LENGTH) {\n        throw newRxError('EN2', {\n            minPassLength: MINIMUM_PASSWORD_LENGTH,\n            password\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]}
\ No newline at end of file
diff --git a/node_modules/rxdb/dist/cjs/plugins/replication-firestore/firestore-helper.js b/node_modules/rxdb/dist/cjs/plugins/replication-firestore/firestore-helper.js
deleted file mode 100644
index 815e0c0..0000000
--- a/node_modules/rxdb/dist/cjs/plugins/replication-firestore/firestore-helper.js
+++ /dev/null
@@ -1,58 +0,0 @@
-"use strict";
-
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
-exports.firestoreRowToDocData = firestoreRowToDocData;
-exports.getContentByIds = getContentByIds;
-exports.getFirestoreSortFieldValue = getFirestoreSortFieldValue;
-exports.isoStringToServerTimestamp = isoStringToServerTimestamp;
-exports.serverTimestampToIsoString = serverTimestampToIsoString;
-exports.stripPrimaryKey = stripPrimaryKey;
-exports.stripServerTimestampField = stripServerTimestampField;
-var _firestore = require("firebase/firestore");
-var _index = require("../../plugins/utils/index.js");
-function getFirestoreSortFieldValue(docData, primaryKey) {
-  var timeString = (0, _index.now)() + '';
-  return 'rxdb-' + timeString.padStart(15, '0') + '-' + docData[primaryKey];
-}
-function stripServerTimestampField(serverTimestampField, docData) {
-  var data = (0, _index.flatClone)(docData);
-  delete data[serverTimestampField];
-  return data;
-}
-function serverTimestampToIsoString(serverTimestampField, docData) {
-  var timestamp = docData[serverTimestampField];
-  var date = timestamp.toDate();
-  return date.toISOString();
-}
-function isoStringToServerTimestamp(isoString) {
-  var date = new Date(isoString);
-  return _firestore.Timestamp.fromDate(date);
-}
-function firestoreRowToDocData(serverTimestampField, primaryPath, row) {
-  var docData = stripServerTimestampField(serverTimestampField, row.data());
-  docData[primaryPath] = row.id;
-  return docData;
-}
-function stripPrimaryKey(primaryPath, docData) {
-  docData = (0, _index.flatClone)(docData);
-  delete docData[primaryPath];
-  return docData;
-}
-
-// https://stackoverflow.com/questions/61354866/is-there-a-workaround-for-the-firebase-query-in-limit-to-10
-function getContentByIds(ids, getQuery) {
-  var batches = [];
-  while (ids.length) {
-    // firestore limits batches to 10
-    var batch = ids.splice(0, 10);
-
-    // add the batch request to to a queue
-    batches.push(getQuery(batch));
-  }
-
-  // after all of the data is fetched, return it
-  return Promise.all(batches).then(content => content.map(i => i.docs).flat());
-}
-//# sourceMappingURL=firestore-helper.js.map
\ No newline at end of file
diff --git a/node_modules/rxdb/dist/cjs/plugins/replication-firestore/firestore-helper.js.map b/node_modules/rxdb/dist/cjs/plugins/replication-firestore/firestore-helper.js.map
deleted file mode 100644
index 26adb1e..0000000
--- a/node_modules/rxdb/dist/cjs/plugins/replication-firestore/firestore-helper.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"firestore-helper.js","names":["_firestore","require","_index","getFirestoreSortFieldValue","docData","primaryKey","timeString","now","padStart","stripServerTimestampField","serverTimestampField","data","flatClone","serverTimestampToIsoString","timestamp","date","toDate","toISOString","isoStringToServerTimestamp","isoString","Date","Timestamp","fromDate","firestoreRowToDocData","primaryPath","row","id","stripPrimaryKey","getContentByIds","ids","getQuery","batches","length","batch","splice","push","Promise","all","then","content","map","i","docs","flat"],"sources":["../../../../src/plugins/replication-firestore/firestore-helper.ts"],"sourcesContent":["import {\n    QueryDocumentSnapshot,\n    Timestamp\n} from 'firebase/firestore';\nimport type {\n    WithDeleted\n} from '../../types/index.d.ts';\nimport { flatClone, now } from '../../plugins/utils/index.ts';\nimport type { GetQuery } from './firestore-types.ts';\n\n\nexport function getFirestoreSortFieldValue(docData: any, primaryKey: string): string {\n    const timeString = now() + '';\n    return 'rxdb-' + timeString.padStart(15, '0') + '-' + docData[primaryKey];\n}\n\nexport function stripServerTimestampField<RxDocType>(\n    serverTimestampField: string,\n    docData: RxDocType\n): WithDeleted<RxDocType> {\n    const data = flatClone(docData);\n    delete (data as any)[serverTimestampField];\n    return data as any;\n}\n\n\nexport function serverTimestampToIsoString(serverTimestampField: string, docData: any): string {\n    const timestamp = (docData as any)[serverTimestampField];\n    const date: Date = timestamp.toDate();\n    return date.toISOString();\n}\n\nexport function isoStringToServerTimestamp(isoString: string): Timestamp {\n    const date = new Date(isoString);\n    return Timestamp.fromDate(date);\n}\n\nexport function firestoreRowToDocData<RxDocType>(\n    serverTimestampField: string,\n    primaryPath: string,\n    row: QueryDocumentSnapshot<RxDocType>\n): WithDeleted<RxDocType> {\n    const docData = stripServerTimestampField(\n        serverTimestampField,\n        row.data()\n    );\n    (docData as any)[primaryPath] = row.id;\n    return docData;\n}\n\nexport function stripPrimaryKey(\n    primaryPath: string,\n    docData: any\n): any {\n    docData = flatClone(docData);\n    delete (docData as any)[primaryPath];\n    return docData;\n}\n\n// https://stackoverflow.com/questions/61354866/is-there-a-workaround-for-the-firebase-query-in-limit-to-10\nexport function getContentByIds<RxDocType>(ids: string[], getQuery: GetQuery<RxDocType>): Promise<QueryDocumentSnapshot<RxDocType>[]> {\n    const batches = [];\n\n    while (ids.length) {\n        // firestore limits batches to 10\n        const batch = ids.splice(0, 10);\n\n        // add the batch request to to a queue\n        batches.push(getQuery(batch));\n    }\n\n    // after all of the data is fetched, return it\n    return Promise.all(batches).then((content) => content.map(i => i.docs).flat());\n}\n"],"mappings":";;;;;;;;;;;;AAAA,IAAAA,UAAA,GAAAC,OAAA;AAOA,IAAAC,MAAA,GAAAD,OAAA;AAIO,SAASE,0BAA0BA,CAACC,OAAY,EAAEC,UAAkB,EAAU;EACjF,IAAMC,UAAU,GAAG,IAAAC,UAAG,EAAC,CAAC,GAAG,EAAE;EAC7B,OAAO,OAAO,GAAGD,UAAU,CAACE,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,GAAG,GAAGJ,OAAO,CAACC,UAAU,CAAC;AAC7E;AAEO,SAASI,yBAAyBA,CACrCC,oBAA4B,EAC5BN,OAAkB,EACI;EACtB,IAAMO,IAAI,GAAG,IAAAC,gBAAS,EAACR,OAAO,CAAC;EAC/B,OAAQO,IAAI,CAASD,oBAAoB,CAAC;EAC1C,OAAOC,IAAI;AACf;AAGO,SAASE,0BAA0BA,CAACH,oBAA4B,EAAEN,OAAY,EAAU;EAC3F,IAAMU,SAAS,GAAIV,OAAO,CAASM,oBAAoB,CAAC;EACxD,IAAMK,IAAU,GAAGD,SAAS,CAACE,MAAM,CAAC,CAAC;EACrC,OAAOD,IAAI,CAACE,WAAW,CAAC,CAAC;AAC7B;AAEO,SAASC,0BAA0BA,CAACC,SAAiB,EAAa;EACrE,IAAMJ,IAAI,GAAG,IAAIK,IAAI,CAACD,SAAS,CAAC;EAChC,OAAOE,oBAAS,CAACC,QAAQ,CAACP,IAAI,CAAC;AACnC;AAEO,SAASQ,qBAAqBA,CACjCb,oBAA4B,EAC5Bc,WAAmB,EACnBC,GAAqC,EACf;EACtB,IAAMrB,OAAO,GAAGK,yBAAyB,CACrCC,oBAAoB,EACpBe,GAAG,CAACd,IAAI,CAAC,CACb,CAAC;EACAP,OAAO,CAASoB,WAAW,CAAC,GAAGC,GAAG,CAACC,EAAE;EACtC,OAAOtB,OAAO;AAClB;AAEO,SAASuB,eAAeA,CAC3BH,WAAmB,EACnBpB,OAAY,EACT;EACHA,OAAO,GAAG,IAAAQ,gBAAS,EAACR,OAAO,CAAC;EAC5B,OAAQA,OAAO,CAASoB,WAAW,CAAC;EACpC,OAAOpB,OAAO;AAClB;;AAEA;AACO,SAASwB,eAAeA,CAAYC,GAAa,EAAEC,QAA6B,EAA+C;EAClI,IAAMC,OAAO,GAAG,EAAE;EAElB,OAAOF,GAAG,CAACG,MAAM,EAAE;IACf;IACA,IAAMC,KAAK,GAAGJ,GAAG,CAACK,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC;;IAE/B;IACAH,OAAO,CAACI,IAAI,CAACL,QAAQ,CAACG,KAAK,CAAC,CAAC;EACjC;;EAEA;EACA,OAAOG,OAAO,CAACC,GAAG,CAACN,OAAO,CAAC,CAACO,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;AAClF","ignoreList":[]}
\ No newline at end of file
diff --git a/node_modules/rxdb/dist/cjs/plugins/replication-firestore/firestore-types.js b/node_modules/rxdb/dist/cjs/plugins/replication-firestore/firestore-types.js
deleted file mode 100644
index 74386df..0000000
--- a/node_modules/rxdb/dist/cjs/plugins/replication-firestore/firestore-types.js
+++ /dev/null
@@ -1,2 +0,0 @@
-"use strict";
-//# sourceMappingURL=firestore-types.js.map
\ No newline at end of file
diff --git a/node_modules/rxdb/dist/cjs/plugins/replication-firestore/firestore-types.js.map b/node_modules/rxdb/dist/cjs/plugins/replication-firestore/firestore-types.js.map
deleted file mode 100644
index 4af79d8..0000000
--- a/node_modules/rxdb/dist/cjs/plugins/replication-firestore/firestore-types.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"firestore-types.js","names":[],"sources":["../../../../src/plugins/replication-firestore/firestore-types.ts"],"sourcesContent":["import type {\n    MaybePromise,\n    ReplicationOptions,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    WithDeleted\n} from '../../types/index.d.ts';\n\nimport type {\n    CollectionReference,\n    Firestore,\n    QueryFieldFilterConstraint,\n    QuerySnapshot\n} from 'firebase/firestore';\n\nexport type FirestoreCheckpointType = {\n    id: string;\n    /**\n     * Firestore internally sets the time to an object like\n     * {\n     *       \"seconds\": 1669807105,\n     *       \"nanoseconds\": 476000000\n     * }\n     * But to be able to query that, we have to use a date string\n     * like '2022-11-30T11:18:25.141Z'\n     * so we store that string instead.\n     */\n    serverTimestamp: string;\n};\nexport type FirestoreCollection<RxDocType> = CollectionReference<RxDocType>;\n\nexport type FirestoreOptions<RxDocType> = {\n    projectId: string;\n    collection: FirestoreCollection<RxDocType>;\n    database: Firestore;\n};\n\nexport type FirestoreSyncPullOptions<RxDocType> =\n    Omit<ReplicationPullOptions<RxDocType, FirestoreCheckpointType>, 'handler' | 'stream$'>\n    & {\n        filter?: QueryFieldFilterConstraint | QueryFieldFilterConstraint[];\n    };\n\nexport type FirestoreSyncPushOptions<RxDocType> = Omit<ReplicationPushOptions<RxDocType>, 'handler'>\n    & {\n        filter?(item: WithDeleted<RxDocType>): MaybePromise<boolean>;\n    };\n\nexport type SyncOptionsFirestore<RxDocType> = Omit<\n    ReplicationOptions<RxDocType, any>,\n    'pull' | 'push'\n> & {\n    firestore: FirestoreOptions<RxDocType>;\n    /**\n     * In firestore it is not possible to read out\n     * the internally used write timestamp.\n     * Even if we could read it out, it is not indexed which\n     * is required for fetch 'changes-since-x'.\n     * So instead we have to rely on a custom user defined field\n     * that contains the server time which is set by firestore via serverTimestamp()\n     * IMPORTANT: The serverTimestampField MUST NOT be part of the collections RxJsonSchema!\n     * [default='serverTimestamp']\n     * @link https://groups.google.com/g/firebase-talk/c/tAmPzPei-mE\n     */\n    serverTimestampField?: string;\n    pull?: FirestoreSyncPullOptions<RxDocType>;\n    push?: FirestoreSyncPushOptions<RxDocType>;\n};\n\nexport type GetQuery<RxDocType> = (ids: string[]) => Promise<QuerySnapshot<RxDocType>>;\n"],"mappings":"","ignoreList":[]}
\ No newline at end of file
diff --git a/node_modules/rxdb/dist/cjs/plugins/replication-firestore/index.js b/node_modules/rxdb/dist/cjs/plugins/replication-firestore/index.js
deleted file mode 100644
index 9c6f262..0000000
--- a/node_modules/rxdb/dist/cjs/plugins/replication-firestore/index.js
+++ /dev/null
@@ -1,261 +0,0 @@
-"use strict";
-
-var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
-var _exportNames = {
-  RxFirestoreReplicationState: true,
-  replicateFirestore: true
-};
-exports.RxFirestoreReplicationState = void 0;
-exports.replicateFirestore = replicateFirestore;
-var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));
-var _index = require("../../plugins/utils/index.js");
-var _firestore = require("firebase/firestore");
-var _index2 = require("../leader-election/index.js");
-var _index3 = require("../replication/index.js");
-var _index4 = require("../../index.js");
-var _rxjs = require("rxjs");
-var _firestoreHelper = require("./firestore-helper.js");
-Object.keys(_firestoreHelper).forEach(function (key) {
-  if (key === "default" || key === "__esModule") return;
-  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
-  if (key in exports && exports[key] === _firestoreHelper[key]) return;
-  Object.defineProperty(exports, key, {
-    enumerable: true,
-    get: function () {
-      return _firestoreHelper[key];
-    }
-  });
-});
-var _firestoreTypes = require("./firestore-types.js");
-Object.keys(_firestoreTypes).forEach(function (key) {
-  if (key === "default" || key === "__esModule") return;
-  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
-  if (key in exports && exports[key] === _firestoreTypes[key]) return;
-  Object.defineProperty(exports, key, {
-    enumerable: true,
-    get: function () {
-      return _firestoreTypes[key];
-    }
-  });
-});
-var RxFirestoreReplicationState = exports.RxFirestoreReplicationState = /*#__PURE__*/function (_RxReplicationState) {
-  function RxFirestoreReplicationState(firestore, replicationIdentifierHash, collection, pull, push, live = true, retryTime = 1000 * 5, autoStart = true) {
-    var _this;
-    _this = _RxReplicationState.call(this, replicationIdentifierHash, collection, '_deleted', pull, push, live, retryTime, autoStart) || this;
-    _this.firestore = firestore;
-    _this.replicationIdentifierHash = replicationIdentifierHash;
-    _this.collection = collection;
-    _this.pull = pull;
-    _this.push = push;
-    _this.live = live;
-    _this.retryTime = retryTime;
-    _this.autoStart = autoStart;
-    return _this;
-  }
-  (0, _inheritsLoose2.default)(RxFirestoreReplicationState, _RxReplicationState);
-  return RxFirestoreReplicationState;
-}(_index3.RxReplicationState);
-function replicateFirestore(options) {
-  var collection = options.collection;
-  (0, _index4.addRxPlugin)(_index2.RxDBLeaderElectionPlugin);
-  var pullStream$ = new _rxjs.Subject();
-  var replicationPrimitivesPull;
-  options.live = typeof options.live === 'undefined' ? true : options.live;
-  options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;
-  var serverTimestampField = typeof options.serverTimestampField === 'undefined' ? 'serverTimestamp' : options.serverTimestampField;
-  options.serverTimestampField = serverTimestampField;
-  var primaryPath = collection.schema.primaryPath;
-
-  /**
-   * The serverTimestampField MUST NOT be part of the collections RxJsonSchema.
-   */
-  var schemaPart = (0, _index4.getSchemaByObjectPath)(collection.schema.jsonSchema, serverTimestampField);
-  if (schemaPart ||
-  // also must not be nested.
-  serverTimestampField.includes('.')) {
-    throw (0, _index4.newRxError)('RC6', {
-      field: serverTimestampField,
-      schema: collection.schema.jsonSchema
-    });
-  }
-  var pullFilters = options.pull?.filter !== undefined ? (0, _index.toArray)(options.pull.filter) : [];
-  var pullQuery = (0, _firestore.query)(options.firestore.collection, ...pullFilters);
-  if (options.pull) {
-    replicationPrimitivesPull = {
-      async handler(lastPulledCheckpoint, batchSize) {
-        var newerQuery;
-        var sameTimeQuery;
-        if (lastPulledCheckpoint) {
-          var lastServerTimestamp = (0, _firestoreHelper.isoStringToServerTimestamp)(lastPulledCheckpoint.serverTimestamp);
-          newerQuery = (0, _firestore.query)(pullQuery, (0, _firestore.where)(serverTimestampField, '>', lastServerTimestamp), (0, _firestore.orderBy)(serverTimestampField, 'asc'), (0, _firestore.limit)(batchSize));
-          sameTimeQuery = (0, _firestore.query)(pullQuery, (0, _firestore.where)(serverTimestampField, '==', lastServerTimestamp), (0, _firestore.where)(primaryPath, '>', lastPulledCheckpoint.id), (0, _firestore.orderBy)(primaryPath, 'asc'), (0, _firestore.limit)(batchSize));
-        } else {
-          newerQuery = (0, _firestore.query)(pullQuery, (0, _firestore.orderBy)(serverTimestampField, 'asc'), (0, _firestore.limit)(batchSize));
-        }
-        var mustsReRun = true;
-        var useDocs = [];
-        while (mustsReRun) {
-          /**
-           * Local writes that have not been persisted to the server
-           * are in pending state and do not have a correct serverTimestamp set.
-           * We have to ensure we only use document states that are in sync with the server.
-           * @link https://medium.com/firebase-developers/the-secrets-of-firestore-fieldvalue-servertimestamp-revealed-29dd7a38a82b
-           */
-          await (0, _firestore.waitForPendingWrites)(options.firestore.database);
-          await (0, _firestore.runTransaction)(options.firestore.database, async _tx => {
-            useDocs = [];
-            var [newerQueryResult, sameTimeQueryResult] = await Promise.all([(0, _firestore.getDocs)(newerQuery), sameTimeQuery ? (0, _firestore.getDocs)(sameTimeQuery) : undefined]);
-            if (newerQueryResult.metadata.hasPendingWrites || sameTimeQuery && (0, _index.ensureNotFalsy)(sameTimeQueryResult).metadata.hasPendingWrites) {
-              return;
-            } else {
-              mustsReRun = false;
-              if (sameTimeQuery) {
-                useDocs = (0, _index.ensureNotFalsy)(sameTimeQueryResult).docs;
-              }
-              var missingAmount = batchSize - useDocs.length;
-              if (missingAmount > 0) {
-                var additionalDocs = newerQueryResult.docs.slice(0, missingAmount).filter(x => !!x);
-                (0, _index.appendToArray)(useDocs, additionalDocs);
-              }
-            }
-          });
-        }
-        if (useDocs.length === 0) {
-          return {
-            checkpoint: lastPulledCheckpoint ?? null,
-            documents: []
-          };
-        }
-        var lastDoc = (0, _index.ensureNotFalsy)((0, _index.lastOfArray)(useDocs));
-        var documents = useDocs.map(row => (0, _firestoreHelper.firestoreRowToDocData)(serverTimestampField, primaryPath, row));
-        var newCheckpoint = {
-          id: lastDoc.id,
-          serverTimestamp: (0, _firestoreHelper.serverTimestampToIsoString)(serverTimestampField, lastDoc.data())
-        };
-        var ret = {
-          documents: documents,
-          checkpoint: newCheckpoint
-        };
-        return ret;
-      },
-      batchSize: (0, _index.ensureNotFalsy)(options.pull).batchSize,
-      modifier: (0, _index.ensureNotFalsy)(options.pull).modifier,
-      stream$: pullStream$.asObservable()
-    };
-  }
-  var replicationPrimitivesPush;
-  if (options.push) {
-    var pushFilter = options.push?.filter;
-    replicationPrimitivesPush = {
-      async handler(rows) {
-        if (pushFilter !== undefined) {
-          rows = await (0, _index.asyncFilter)(rows, row => pushFilter(row.newDocumentState));
-        }
-        var writeRowsById = {};
-        var docIds = rows.map(row => {
-          var docId = row.newDocumentState[primaryPath];
-          writeRowsById[docId] = row;
-          return docId;
-        });
-        await (0, _firestore.waitForPendingWrites)(options.firestore.database);
-        var conflicts = [];
-
-        /**
-         * Everything must run INSIDE of the transaction
-         * because on tx-errors, firebase will re-run the transaction on some cases.
-         * @link https://firebase.google.com/docs/firestore/manage-data/transactions#transaction_failure
-         * @link https://firebase.google.com/docs/firestore/manage-data/transactions
-         */
-        await (0, _firestore.runTransaction)(options.firestore.database, async _tx => {
-          conflicts = []; // reset in case the tx has re-run.
-          /**
-           * @link https://stackoverflow.com/a/48423626/3443137
-           */
-
-          var getQuery = ids => {
-            return (0, _firestore.getDocs)((0, _firestore.query)(options.firestore.collection, (0, _firestore.where)((0, _firestore.documentId)(), 'in', ids)));
-          };
-          var docsInDbResult = await (0, _firestoreHelper.getContentByIds)(docIds, getQuery);
-          var docsInDbById = {};
-          docsInDbResult.forEach(row => {
-            var docDataInDb = (0, _firestoreHelper.stripServerTimestampField)(serverTimestampField, row.data());
-            var docId = row.id;
-            docDataInDb[primaryPath] = docId;
-            docsInDbById[docId] = docDataInDb;
-          });
-
-          /**
-           * @link https://firebase.google.com/docs/firestore/manage-data/transactions#batched-writes
-           */
-          var batch = (0, _firestore.writeBatch)(options.firestore.database);
-          var hasWrite = false;
-          await Promise.all(Object.entries(writeRowsById).map(async ([docId, writeRow]) => {
-            var docInDb = docsInDbById[docId];
-            if (docInDb && (!writeRow.assumedMasterState || (await collection.conflictHandler({
-              newDocumentState: docInDb,
-              realMasterState: writeRow.assumedMasterState
-            }, 'replication-firestore-push')).isEqual === false)) {
-              // conflict
-              conflicts.push(docInDb);
-            } else {
-              // no conflict
-              hasWrite = true;
-              var docRef = (0, _firestore.doc)(options.firestore.collection, docId);
-              var writeDocData = (0, _index.flatClone)(writeRow.newDocumentState);
-              writeDocData[serverTimestampField] = (0, _firestore.serverTimestamp)();
-              if (!docInDb) {
-                // insert
-                batch.set(docRef, (0, _firestoreHelper.stripPrimaryKey)(primaryPath, writeDocData));
-              } else {
-                // update
-                batch.update(docRef, (0, _firestoreHelper.stripPrimaryKey)(primaryPath, writeDocData));
-              }
-            }
-          }));
-          if (hasWrite) {
-            await batch.commit();
-          }
-        });
-        await (0, _firestore.waitForPendingWrites)(options.firestore.database);
-        return conflicts;
-      },
-      batchSize: options.push.batchSize,
-      modifier: options.push.modifier
-    };
-  }
-  var replicationState = new RxFirestoreReplicationState(options.firestore, options.replicationIdentifier, collection, replicationPrimitivesPull, replicationPrimitivesPush, options.live, options.retryTime, options.autoStart);
-
-  /**
-   * Use long polling to get live changes for the pull.stream$
-   */
-  if (options.live && options.pull) {
-    var startBefore = replicationState.start.bind(replicationState);
-    var cancelBefore = replicationState.cancel.bind(replicationState);
-    replicationState.start = () => {
-      var lastChangeQuery = (0, _firestore.query)(pullQuery, (0, _firestore.orderBy)(serverTimestampField, 'desc'), (0, _firestore.limit)(1));
-      var unsubscribe = (0, _firestore.onSnapshot)(lastChangeQuery, _querySnapshot => {
-        /**
-         * There is no good way to observe the event stream in firestore.
-         * So instead we listen to any write to the collection
-         * and then emit a 'RESYNC' flag.
-         */
-        replicationState.reSync();
-      }, error => {
-        replicationState.subjects.error.next((0, _index4.newRxError)('RC_STREAM', {
-          error: (0, _index.errorToPlainJson)(error)
-        }));
-      });
-      replicationState.cancel = () => {
-        unsubscribe();
-        return cancelBefore();
-      };
-      return startBefore();
-    };
-  }
-  (0, _index3.startReplicationOnLeaderShip)(options.waitForLeadership, replicationState);
-  return replicationState;
-}
-//# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/rxdb/dist/cjs/plugins/replication-firestore/index.js.map b/node_modules/rxdb/dist/cjs/plugins/replication-firestore/index.js.map
deleted file mode 100644
index 7f936d7..0000000
--- a/node_modules/rxdb/dist/cjs/plugins/replication-firestore/index.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"index.js","names":["_index","require","_firestore","_index2","_index3","_index4","_rxjs","_firestoreHelper","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_firestoreTypes","RxFirestoreReplicationState","_RxReplicationState","firestore","replicationIdentifierHash","collection","pull","push","live","retryTime","autoStart","_this","_inheritsLoose2","default","RxReplicationState","replicateFirestore","options","addRxPlugin","RxDBLeaderElectionPlugin","pullStream$","Subject","replicationPrimitivesPull","waitForLeadership","serverTimestampField","primaryPath","schema","schemaPart","getSchemaByObjectPath","jsonSchema","includes","newRxError","field","pullFilters","filter","undefined","toArray","pullQuery","query","handler","lastPulledCheckpoint","batchSize","newerQuery","sameTimeQuery","lastServerTimestamp","isoStringToServerTimestamp","serverTimestamp","where","orderBy","limit","id","mustsReRun","useDocs","waitForPendingWrites","database","runTransaction","_tx","newerQueryResult","sameTimeQueryResult","Promise","all","getDocs","metadata","hasPendingWrites","ensureNotFalsy","docs","missingAmount","length","additionalDocs","slice","x","appendToArray","checkpoint","documents","lastDoc","lastOfArray","map","row","firestoreRowToDocData","newCheckpoint","serverTimestampToIsoString","data","ret","modifier","stream$","asObservable","replicationPrimitivesPush","pushFilter","rows","asyncFilter","newDocumentState","writeRowsById","docIds","docId","conflicts","getQuery","ids","documentId","docsInDbResult","getContentByIds","docsInDbById","docDataInDb","stripServerTimestampField","batch","writeBatch","hasWrite","entries","writeRow","docInDb","assumedMasterState","conflictHandler","realMasterState","isEqual","docRef","doc","writeDocData","flatClone","set","stripPrimaryKey","update","commit","replicationState","replicationIdentifier","startBefore","start","bind","cancelBefore","cancel","lastChangeQuery","unsubscribe","onSnapshot","_querySnapshot","reSync","error","subjects","next","errorToPlainJson","startReplicationOnLeaderShip"],"sources":["../../../../src/plugins/replication-firestore/index.ts"],"sourcesContent":["import {\n    appendToArray,\n    asyncFilter,\n    ensureNotFalsy,\n    errorToPlainJson,\n    flatClone,\n    lastOfArray,\n    toArray\n} from '../../plugins/utils/index.ts';\n\nimport {\n    doc,\n    query,\n    where,\n    orderBy,\n    limit,\n    getDocs,\n    onSnapshot,\n    runTransaction,\n    writeBatch,\n    serverTimestamp,\n    QueryDocumentSnapshot,\n    waitForPendingWrites,\n    documentId\n} from 'firebase/firestore';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\nimport type {\n    RxCollection,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    RxReplicationPullStreamItem\n} from '../../types/index.d.ts';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication/index.ts';\nimport {\n    addRxPlugin,\n    ById,\n    getSchemaByObjectPath,\n    newRxError,\n    WithDeleted\n} from '../../index.ts';\n\nimport type {\n    FirestoreCheckpointType,\n    FirestoreOptions,\n    SyncOptionsFirestore\n} from './firestore-types.ts';\nimport { Subject } from 'rxjs';\nimport {\n    firestoreRowToDocData,\n    getContentByIds,\n    isoStringToServerTimestamp,\n    serverTimestampToIsoString,\n    stripPrimaryKey,\n    stripServerTimestampField\n} from './firestore-helper.ts';\n\nexport * from './firestore-helper.ts';\nexport * from './firestore-types.ts';\n\nexport class RxFirestoreReplicationState<RxDocType> extends RxReplicationState<RxDocType, FirestoreCheckpointType> {\n    constructor(\n        public readonly firestore: FirestoreOptions<RxDocType>,\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly pull?: ReplicationPullOptions<RxDocType, FirestoreCheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live: boolean = true,\n        public retryTime: number = 1000 * 5,\n        public autoStart: boolean = true\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            '_deleted',\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n}\n\nexport function replicateFirestore<RxDocType>(\n    options: SyncOptionsFirestore<RxDocType>\n): RxFirestoreReplicationState<RxDocType> {\n    const collection = options.collection;\n    addRxPlugin(RxDBLeaderElectionPlugin);\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, FirestoreCheckpointType>> = new Subject();\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, FirestoreCheckpointType> | undefined;\n    options.live = typeof options.live === 'undefined' ? true : options.live;\n    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\n    const serverTimestampField = typeof options.serverTimestampField === 'undefined' ? 'serverTimestamp' : options.serverTimestampField;\n    options.serverTimestampField = serverTimestampField;\n    const primaryPath = collection.schema.primaryPath;\n\n    /**\n     * The serverTimestampField MUST NOT be part of the collections RxJsonSchema.\n     */\n    const schemaPart = getSchemaByObjectPath(collection.schema.jsonSchema, serverTimestampField);\n    if (\n        schemaPart ||\n        // also must not be nested.\n        serverTimestampField.includes('.')\n    ) {\n        throw newRxError('RC6', {\n            field: serverTimestampField,\n            schema: collection.schema.jsonSchema\n        });\n    }\n\n    const pullFilters = options.pull?.filter !== undefined\n        ? toArray(options.pull.filter)\n        : [];\n\n    const pullQuery = query(options.firestore.collection, ...pullFilters);\n\n    if (options.pull) {\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: FirestoreCheckpointType | undefined,\n                batchSize: number\n            ) {\n                let newerQuery: ReturnType<typeof query>;\n                let sameTimeQuery: ReturnType<typeof query> | undefined;\n\n                if (lastPulledCheckpoint) {\n                    const lastServerTimestamp = isoStringToServerTimestamp(lastPulledCheckpoint.serverTimestamp);\n                    newerQuery = query(pullQuery,\n                        where(serverTimestampField, '>', lastServerTimestamp),\n                        orderBy(serverTimestampField, 'asc'),\n                        limit(batchSize)\n                    );\n                    sameTimeQuery = query(pullQuery,\n                        where(serverTimestampField, '==', lastServerTimestamp),\n                        where(primaryPath, '>', lastPulledCheckpoint.id),\n                        orderBy(primaryPath, 'asc'),\n                        limit(batchSize)\n                    );\n                } else {\n                    newerQuery = query(pullQuery,\n                        orderBy(serverTimestampField, 'asc'),\n                        limit(batchSize)\n                    );\n                }\n\n                let mustsReRun = true;\n                let useDocs: QueryDocumentSnapshot<RxDocType>[] = [];\n                while (mustsReRun) {\n                    /**\n                     * Local writes that have not been persisted to the server\n                     * are in pending state and do not have a correct serverTimestamp set.\n                     * We have to ensure we only use document states that are in sync with the server.\n                     * @link https://medium.com/firebase-developers/the-secrets-of-firestore-fieldvalue-servertimestamp-revealed-29dd7a38a82b\n                     */\n                    await waitForPendingWrites(options.firestore.database);\n                    await runTransaction(options.firestore.database, async (_tx) => {\n                        useDocs = [];\n                        const [\n                            newerQueryResult,\n                            sameTimeQueryResult\n                        ] = await Promise.all([\n                            getDocs(newerQuery),\n                            sameTimeQuery ? getDocs(sameTimeQuery) : undefined\n                        ]);\n\n                        if (\n                            newerQueryResult.metadata.hasPendingWrites ||\n                            (sameTimeQuery && ensureNotFalsy(sameTimeQueryResult).metadata.hasPendingWrites)\n                        ) {\n                            return;\n                        } else {\n                            mustsReRun = false;\n\n                            if (sameTimeQuery) {\n                                useDocs = ensureNotFalsy(sameTimeQueryResult).docs as any;\n                            }\n                            const missingAmount = batchSize - useDocs.length;\n                            if (missingAmount > 0) {\n                                const additionalDocs = newerQueryResult.docs.slice(0, missingAmount).filter(x => !!x);\n                                appendToArray(useDocs, additionalDocs);\n                            }\n                        }\n                    });\n                }\n\n                if (useDocs.length === 0) {\n                    return {\n                        checkpoint: lastPulledCheckpoint ?? null,\n                        documents: []\n                    };\n                }\n                const lastDoc = ensureNotFalsy(lastOfArray(useDocs));\n                const documents: WithDeleted<RxDocType>[] = useDocs\n                    .map(row => firestoreRowToDocData(\n                        serverTimestampField,\n                        primaryPath,\n                        row\n                    ));\n                const newCheckpoint: FirestoreCheckpointType = {\n                    id: lastDoc.id,\n                    serverTimestamp: serverTimestampToIsoString(serverTimestampField, lastDoc.data())\n                };\n                const ret = {\n                    documents: documents,\n                    checkpoint: newCheckpoint\n                };\n                return ret;\n            },\n            batchSize: ensureNotFalsy(options.pull).batchSize,\n            modifier: ensureNotFalsy(options.pull).modifier,\n            stream$: pullStream$.asObservable()\n        };\n    }\n\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (options.push) {\n        const pushFilter = options.push?.filter;\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                if (pushFilter !== undefined) {\n                    rows = await asyncFilter(rows, (row) => pushFilter(row.newDocumentState));\n                }\n\n                const writeRowsById: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\n                const docIds: string[] = rows.map(row => {\n                    const docId = (row.newDocumentState as any)[primaryPath];\n                    writeRowsById[docId] = row;\n                    return docId;\n                });\n                await waitForPendingWrites(options.firestore.database);\n                let conflicts: WithDeleted<RxDocType>[] = [];\n\n                /**\n                 * Everything must run INSIDE of the transaction\n                 * because on tx-errors, firebase will re-run the transaction on some cases.\n                 * @link https://firebase.google.com/docs/firestore/manage-data/transactions#transaction_failure\n                 * @link https://firebase.google.com/docs/firestore/manage-data/transactions\n                 */\n                await runTransaction(options.firestore.database, async (_tx) => {\n                    conflicts = []; // reset in case the tx has re-run.\n                    /**\n                     * @link https://stackoverflow.com/a/48423626/3443137\n                     */\n\n                    const getQuery = (ids: string[]) => {\n                        return getDocs(\n                            query(\n                                options.firestore.collection,\n                                where(documentId(), 'in', ids)\n                            )\n                        );\n                    };\n\n                    const docsInDbResult = await getContentByIds<RxDocType>(docIds, getQuery);\n\n                    const docsInDbById: ById<RxDocType> = {};\n                    docsInDbResult.forEach(row => {\n                        const docDataInDb = stripServerTimestampField(serverTimestampField, row.data());\n                        const docId = row.id;\n                        (docDataInDb as any)[primaryPath] = docId;\n                        docsInDbById[docId] = docDataInDb;\n                    });\n\n                    /**\n                     * @link https://firebase.google.com/docs/firestore/manage-data/transactions#batched-writes\n                     */\n                    const batch = writeBatch(options.firestore.database);\n                    let hasWrite = false;\n                    await Promise.all(\n                        Object.entries(writeRowsById).map(async ([docId, writeRow]) => {\n                            const docInDb: RxDocType | undefined = docsInDbById[docId];\n\n                            if (\n                                docInDb &&\n                                (\n                                    !writeRow.assumedMasterState ||\n                                    (await collection.conflictHandler({\n                                        newDocumentState: docInDb as any,\n                                        realMasterState: writeRow.assumedMasterState\n                                    }, 'replication-firestore-push')).isEqual === false\n                                )\n                            ) {\n                                // conflict\n                                conflicts.push(docInDb as any);\n                            } else {\n                                // no conflict\n                                hasWrite = true;\n                                const docRef = doc(options.firestore.collection, docId);\n                                const writeDocData = flatClone(writeRow.newDocumentState);\n                                (writeDocData as any)[serverTimestampField] = serverTimestamp();\n                                if (!docInDb) {\n                                    // insert\n                                    batch.set(docRef, stripPrimaryKey(primaryPath, writeDocData));\n                                } else {\n                                    // update\n                                    batch.update(docRef, stripPrimaryKey(primaryPath, writeDocData));\n                                }\n                            }\n                        })\n                    );\n\n                    if (hasWrite) {\n                        await batch.commit();\n                    }\n                });\n                await waitForPendingWrites(options.firestore.database);\n                return conflicts;\n            },\n            batchSize: options.push.batchSize,\n            modifier: options.push.modifier\n        };\n    }\n\n\n    const replicationState = new RxFirestoreReplicationState<RxDocType>(\n        options.firestore,\n        options.replicationIdentifier,\n        collection,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        options.live,\n        options.retryTime,\n        options.autoStart\n    );\n\n    /**\n     * Use long polling to get live changes for the pull.stream$\n     */\n    if (options.live && options.pull) {\n        const startBefore = replicationState.start.bind(replicationState);\n        const cancelBefore = replicationState.cancel.bind(replicationState);\n        replicationState.start = () => {\n            const lastChangeQuery = query(\n                pullQuery,\n                orderBy(serverTimestampField, 'desc'),\n                limit(1)\n            );\n            const unsubscribe = onSnapshot(\n                lastChangeQuery,\n                (_querySnapshot) => {\n                    /**\n                     * There is no good way to observe the event stream in firestore.\n                     * So instead we listen to any write to the collection\n                     * and then emit a 'RESYNC' flag.\n                     */\n                    replicationState.reSync();\n                },\n                (error) => {\n                    replicationState.subjects.error.next(\n                        newRxError('RC_STREAM', { error: errorToPlainJson(error) })\n                    );\n                }\n            );\n            replicationState.cancel = () => {\n                unsubscribe();\n                return cancelBefore();\n            };\n            return startBefore();\n        };\n    }\n\n    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);\n\n    return replicationState;\n}\n"],"mappings":"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","ignoreList":[]}
\ No newline at end of file
diff --git a/node_modules/rxdb/dist/cjs/plugins/test-utils/config.js b/node_modules/rxdb/dist/cjs/plugins/test-utils/config.js
index 9ff71b6..ae745ea 100644
--- a/node_modules/rxdb/dist/cjs/plugins/test-utils/config.js
+++ b/node_modules/rxdb/dist/cjs/plugins/test-utils/config.js
@@ -6,7 +6,6 @@ Object.defineProperty(exports, "__esModule", {
 });
 exports.ENV_VARIABLES = exports.DEFAULT_STORAGE = void 0;
 exports.getConfig = getConfig;
-exports.getEncryptedStorage = getEncryptedStorage;
 exports.getPassword = getPassword;
 exports.initTestEnvironment = initTestEnvironment;
 exports.isDeno = exports.isBun = void 0;
@@ -17,7 +16,6 @@ exports.setConfig = setConfig;
 var _index = require("../utils/index.js");
 var _broadcastChannel = require("broadcast-channel");
 var _nodeEvents = _interopRequireDefault(require("node:events"));
-var _index2 = require("../encryption-crypto-js/index.js");
 /// <reference path="../../../node_modules/@types/mocha/index.d.ts" />
 
 var isDeno = exports.isDeno = typeof window !== 'undefined' && 'Deno' in window;
@@ -99,12 +97,6 @@ function initTestEnvironment() {
     };
   }
 }
-function getEncryptedStorage(baseStorage = getConfig().storage.getStorage()) {
-  var ret = config.storage.hasEncryption ? baseStorage : (0, _index2.wrappedKeyEncryptionCryptoJsStorage)({
-    storage: baseStorage
-  });
-  return ret;
-}
 function isNotOneOfTheseStorages(storageNames) {
   var isName = getConfig().storage.name;
   if (storageNames.includes(isName)) {
diff --git a/node_modules/rxdb/dist/esm/plugins/encryption-crypto-js/index.js b/node_modules/rxdb/dist/esm/plugins/encryption-crypto-js/index.js
deleted file mode 100644
index a15ff31..0000000
--- a/node_modules/rxdb/dist/esm/plugins/encryption-crypto-js/index.js
+++ /dev/null
@@ -1,136 +0,0 @@
-/**
- * this plugin adds the encryption-capabilities to rxdb
- * It's using crypto-js/aes for password-encryption
- * @link https://github.com/brix/crypto-js
- */
-import pkg from 'crypto-js';
-var {
-  AES,
-  enc: cryptoEnc
-} = pkg;
-import { wrapRxStorageInstance } from "../../plugin-helpers.js";
-import { newRxError, newRxTypeError } from "../../rx-error.js";
-import { hasEncryption } from "../../rx-storage-helper.js";
-import { b64DecodeUnicode, b64EncodeUnicode, clone, ensureNotFalsy, flatClone, getProperty, setProperty } from "../../plugins/utils/index.js";
-export var MINIMUM_PASSWORD_LENGTH = 8;
-export function encryptString(value, password) {
-  var encrypted = AES.encrypt(value, password);
-  return encrypted.toString();
-}
-export function decryptString(cipherText, password) {
-  /**
-   * Trying to decrypt non-strings
-   * will cause no errors and will be hard to debug.
-   * So instead we do this check here.
-   */
-  if (typeof cipherText !== 'string') {
-    throw newRxError('SNH', {
-      args: {
-        cipherText
-      }
-    });
-  }
-  var decrypted = AES.decrypt(cipherText, password);
-  var ret = decrypted.toString(cryptoEnc.Utf8);
-  return ret;
-}
-export function wrappedKeyEncryptionCryptoJsStorage(args) {
-  return Object.assign({}, args.storage, {
-    async createStorageInstance(params) {
-      if (typeof params.password !== 'undefined') {
-        validatePassword(params.password);
-      }
-      if (!hasEncryption(params.schema)) {
-        var retInstance = await args.storage.createStorageInstance(params);
-        return retInstance;
-      }
-      if (!params.password) {
-        throw newRxError('EN3', {
-          database: params.databaseName,
-          collection: params.collectionName,
-          schema: params.schema
-        });
-      }
-      var password = params.password;
-      var schemaWithoutEncrypted = clone(params.schema);
-      delete schemaWithoutEncrypted.encrypted;
-      if (schemaWithoutEncrypted.attachments) {
-        schemaWithoutEncrypted.attachments.encrypted = false;
-      }
-      var instance = await args.storage.createStorageInstance(Object.assign({}, params, {
-        schema: schemaWithoutEncrypted
-      }));
-      function modifyToStorage(docData) {
-        docData = cloneWithoutAttachments(docData);
-        ensureNotFalsy(params.schema.encrypted).forEach(path => {
-          var value = getProperty(docData, path);
-          if (typeof value === 'undefined') {
-            return;
-          }
-          var stringValue = JSON.stringify(value);
-          var encrypted = encryptString(stringValue, password);
-          setProperty(docData, path, encrypted);
-        });
-
-        // handle attachments
-        if (params.schema.attachments && params.schema.attachments.encrypted) {
-          var newAttachments = {};
-          Object.entries(docData._attachments).forEach(([id, attachment]) => {
-            var useAttachment = flatClone(attachment);
-            if (useAttachment.data) {
-              var dataString = useAttachment.data;
-              useAttachment.data = b64EncodeUnicode(encryptString(dataString, password));
-            }
-            newAttachments[id] = useAttachment;
-          });
-          docData._attachments = newAttachments;
-        }
-        return docData;
-      }
-      function modifyFromStorage(docData) {
-        docData = cloneWithoutAttachments(docData);
-        ensureNotFalsy(params.schema.encrypted).forEach(path => {
-          var value = getProperty(docData, path);
-          if (typeof value === 'undefined') {
-            return;
-          }
-          var decrypted = decryptString(value, password);
-          var decryptedParsed = JSON.parse(decrypted);
-          setProperty(docData, path, decryptedParsed);
-        });
-        return docData;
-      }
-      function modifyAttachmentFromStorage(attachmentData) {
-        if (params.schema.attachments && params.schema.attachments.encrypted) {
-          var decrypted = decryptString(b64DecodeUnicode(attachmentData), password);
-          return decrypted;
-        } else {
-          return attachmentData;
-        }
-      }
-      return wrapRxStorageInstance(params.schema, instance, modifyToStorage, modifyFromStorage, modifyAttachmentFromStorage);
-    }
-  });
-}
-function cloneWithoutAttachments(data) {
-  var attachments = data._attachments;
-  data = flatClone(data);
-  delete data._attachments;
-  data = clone(data);
-  data._attachments = attachments;
-  return data;
-}
-function validatePassword(password) {
-  if (typeof password !== 'string') {
-    throw newRxTypeError('EN1', {
-      password
-    });
-  }
-  if (password.length < MINIMUM_PASSWORD_LENGTH) {
-    throw newRxError('EN2', {
-      minPassLength: MINIMUM_PASSWORD_LENGTH,
-      password
-    });
-  }
-}
-//# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/rxdb/dist/esm/plugins/encryption-crypto-js/index.js.map b/node_modules/rxdb/dist/esm/plugins/encryption-crypto-js/index.js.map
deleted file mode 100644
index da1db89..0000000
--- a/node_modules/rxdb/dist/esm/plugins/encryption-crypto-js/index.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"index.js","names":["pkg","AES","enc","cryptoEnc","wrapRxStorageInstance","newRxError","newRxTypeError","hasEncryption","b64DecodeUnicode","b64EncodeUnicode","clone","ensureNotFalsy","flatClone","getProperty","setProperty","MINIMUM_PASSWORD_LENGTH","encryptString","value","password","encrypted","encrypt","toString","decryptString","cipherText","args","decrypted","decrypt","ret","Utf8","wrappedKeyEncryptionCryptoJsStorage","Object","assign","storage","createStorageInstance","params","validatePassword","schema","retInstance","database","databaseName","collection","collectionName","schemaWithoutEncrypted","attachments","instance","modifyToStorage","docData","cloneWithoutAttachments","forEach","path","stringValue","JSON","stringify","newAttachments","entries","_attachments","id","attachment","useAttachment","data","dataString","modifyFromStorage","decryptedParsed","parse","modifyAttachmentFromStorage","attachmentData","length","minPassLength"],"sources":["../../../../src/plugins/encryption-crypto-js/index.ts"],"sourcesContent":["/**\n * this plugin adds the encryption-capabilities to rxdb\n * It's using crypto-js/aes for password-encryption\n * @link https://github.com/brix/crypto-js\n */\nimport pkg from 'crypto-js';\nconst { AES, enc: cryptoEnc } = pkg;\n\nimport { wrapRxStorageInstance } from '../../plugin-helpers.ts';\nimport { newRxError, newRxTypeError } from '../../rx-error.ts';\nimport { hasEncryption } from '../../rx-storage-helper.ts';\nimport type {\n    InternalStoreDocType,\n    RxAttachmentWriteData,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstanceCreationParams\n} from '../../types/index.d.ts';\nimport {\n    b64DecodeUnicode,\n    b64EncodeUnicode,\n    clone,\n    ensureNotFalsy,\n    flatClone,\n    getProperty,\n    setProperty\n} from '../../plugins/utils/index.ts';\n\nexport const MINIMUM_PASSWORD_LENGTH: 8 = 8;\n\n\nexport function encryptString(value: string, password: string): string {\n    const encrypted = AES.encrypt(value, password);\n    return encrypted.toString();\n}\n\nexport function decryptString(cipherText: string, password: any): string {\n    /**\n     * Trying to decrypt non-strings\n     * will cause no errors and will be hard to debug.\n     * So instead we do this check here.\n     */\n    if (typeof cipherText !== 'string') {\n        throw newRxError('SNH', {\n            args: {\n                cipherText\n            }\n        });\n    }\n\n    const decrypted = AES.decrypt(cipherText, password);\n    const ret = decrypted.toString(cryptoEnc.Utf8);\n    return ret;\n}\n\nexport type InternalStorePasswordDocType = InternalStoreDocType<{\n    hash: string;\n}>;\n\nexport function wrappedKeyEncryptionCryptoJsStorage<Internals, InstanceCreationOptions>(\n    args: {\n        storage: RxStorage<Internals, InstanceCreationOptions>;\n    }\n): RxStorage<Internals, InstanceCreationOptions> {\n    return Object.assign(\n        {},\n        args.storage,\n        {\n            async createStorageInstance<RxDocType>(\n                params: RxStorageInstanceCreationParams<RxDocType, any>\n            ) {\n                if (typeof params.password !== 'undefined') {\n                    validatePassword(params.password as any);\n                }\n\n                if (!hasEncryption(params.schema)) {\n                    const retInstance = await args.storage.createStorageInstance(params);\n                    return retInstance;\n                }\n\n                if (!params.password) {\n                    throw newRxError('EN3', {\n                        database: params.databaseName,\n                        collection: params.collectionName,\n                        schema: params.schema\n                    });\n                }\n                const password = params.password;\n\n                const schemaWithoutEncrypted: RxJsonSchema<RxDocumentData<RxDocType>> = clone(params.schema);\n                delete schemaWithoutEncrypted.encrypted;\n                if (schemaWithoutEncrypted.attachments) {\n                    schemaWithoutEncrypted.attachments.encrypted = false;\n                }\n\n                const instance = await args.storage.createStorageInstance(\n                    Object.assign(\n                        {},\n                        params,\n                        {\n                            schema: schemaWithoutEncrypted\n                        }\n                    )\n                );\n\n                function modifyToStorage(docData: RxDocumentWriteData<RxDocType>) {\n                    docData = cloneWithoutAttachments(docData);\n                    ensureNotFalsy(params.schema.encrypted)\n                        .forEach(path => {\n                            const value = getProperty(docData, path);\n                            if (typeof value === 'undefined') {\n                                return;\n                            }\n\n                            const stringValue = JSON.stringify(value);\n                            const encrypted = encryptString(stringValue, password);\n                            setProperty(docData, path, encrypted);\n                        });\n\n                    // handle attachments\n                    if (\n                        params.schema.attachments &&\n                        params.schema.attachments.encrypted\n                    ) {\n                        const newAttachments: typeof docData._attachments = {};\n                        Object.entries(docData._attachments).forEach(([id, attachment]) => {\n                            const useAttachment: RxAttachmentWriteData = flatClone(attachment) as any;\n                            if (useAttachment.data) {\n                                const dataString = useAttachment.data;\n                                useAttachment.data = b64EncodeUnicode(encryptString(dataString, password));\n                            }\n                            newAttachments[id] = useAttachment;\n                        });\n                        docData._attachments = newAttachments;\n                    }\n                    return docData;\n                }\n                function modifyFromStorage(docData: RxDocumentData<any>): Promise<RxDocumentData<RxDocType>> {\n                    docData = cloneWithoutAttachments(docData);\n                    ensureNotFalsy(params.schema.encrypted)\n                        .forEach(path => {\n                            const value = getProperty(docData, path);\n                            if (typeof value === 'undefined') {\n                                return;\n                            }\n                            const decrypted = decryptString(value, password);\n                            const decryptedParsed = JSON.parse(decrypted);\n                            setProperty(docData, path, decryptedParsed);\n                        });\n                    return docData;\n                }\n\n                function modifyAttachmentFromStorage(attachmentData: string): string {\n                    if (\n                        params.schema.attachments &&\n                        params.schema.attachments.encrypted\n                    ) {\n                        const decrypted = decryptString(b64DecodeUnicode(attachmentData), password);\n                        return decrypted;\n                    } else {\n                        return attachmentData;\n                    }\n                }\n\n                return wrapRxStorageInstance(\n                    params.schema,\n                    instance,\n                    modifyToStorage,\n                    modifyFromStorage,\n                    modifyAttachmentFromStorage\n                );\n            }\n        }\n    );\n}\n\n\n\n\n\nfunction cloneWithoutAttachments<T>(data: RxDocumentWriteData<T>): RxDocumentData<T> {\n    const attachments = data._attachments;\n    data = flatClone(data);\n    delete (data as any)._attachments;\n    data = clone(data);\n    data._attachments = attachments;\n    return data as any;\n}\n\nfunction validatePassword(password: string) {\n    if (typeof password !== 'string') {\n        throw newRxTypeError('EN1', {\n            password\n        });\n    }\n    if (password.length < MINIMUM_PASSWORD_LENGTH) {\n        throw newRxError('EN2', {\n            minPassLength: MINIMUM_PASSWORD_LENGTH,\n            password\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]}
\ No newline at end of file
diff --git a/node_modules/rxdb/dist/esm/plugins/replication-firestore/firestore-helper.js b/node_modules/rxdb/dist/esm/plugins/replication-firestore/firestore-helper.js
deleted file mode 100644
index 148afd7..0000000
--- a/node_modules/rxdb/dist/esm/plugins/replication-firestore/firestore-helper.js
+++ /dev/null
@@ -1,46 +0,0 @@
-import { Timestamp } from 'firebase/firestore';
-import { flatClone, now } from "../../plugins/utils/index.js";
-export function getFirestoreSortFieldValue(docData, primaryKey) {
-  var timeString = now() + '';
-  return 'rxdb-' + timeString.padStart(15, '0') + '-' + docData[primaryKey];
-}
-export function stripServerTimestampField(serverTimestampField, docData) {
-  var data = flatClone(docData);
-  delete data[serverTimestampField];
-  return data;
-}
-export function serverTimestampToIsoString(serverTimestampField, docData) {
-  var timestamp = docData[serverTimestampField];
-  var date = timestamp.toDate();
-  return date.toISOString();
-}
-export function isoStringToServerTimestamp(isoString) {
-  var date = new Date(isoString);
-  return Timestamp.fromDate(date);
-}
-export function firestoreRowToDocData(serverTimestampField, primaryPath, row) {
-  var docData = stripServerTimestampField(serverTimestampField, row.data());
-  docData[primaryPath] = row.id;
-  return docData;
-}
-export function stripPrimaryKey(primaryPath, docData) {
-  docData = flatClone(docData);
-  delete docData[primaryPath];
-  return docData;
-}
-
-// https://stackoverflow.com/questions/61354866/is-there-a-workaround-for-the-firebase-query-in-limit-to-10
-export function getContentByIds(ids, getQuery) {
-  var batches = [];
-  while (ids.length) {
-    // firestore limits batches to 10
-    var batch = ids.splice(0, 10);
-
-    // add the batch request to to a queue
-    batches.push(getQuery(batch));
-  }
-
-  // after all of the data is fetched, return it
-  return Promise.all(batches).then(content => content.map(i => i.docs).flat());
-}
-//# sourceMappingURL=firestore-helper.js.map
\ No newline at end of file
diff --git a/node_modules/rxdb/dist/esm/plugins/replication-firestore/firestore-helper.js.map b/node_modules/rxdb/dist/esm/plugins/replication-firestore/firestore-helper.js.map
deleted file mode 100644
index 651d3bc..0000000
--- a/node_modules/rxdb/dist/esm/plugins/replication-firestore/firestore-helper.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"firestore-helper.js","names":["Timestamp","flatClone","now","getFirestoreSortFieldValue","docData","primaryKey","timeString","padStart","stripServerTimestampField","serverTimestampField","data","serverTimestampToIsoString","timestamp","date","toDate","toISOString","isoStringToServerTimestamp","isoString","Date","fromDate","firestoreRowToDocData","primaryPath","row","id","stripPrimaryKey","getContentByIds","ids","getQuery","batches","length","batch","splice","push","Promise","all","then","content","map","i","docs","flat"],"sources":["../../../../src/plugins/replication-firestore/firestore-helper.ts"],"sourcesContent":["import {\n    QueryDocumentSnapshot,\n    Timestamp\n} from 'firebase/firestore';\nimport type {\n    WithDeleted\n} from '../../types/index.d.ts';\nimport { flatClone, now } from '../../plugins/utils/index.ts';\nimport type { GetQuery } from './firestore-types.ts';\n\n\nexport function getFirestoreSortFieldValue(docData: any, primaryKey: string): string {\n    const timeString = now() + '';\n    return 'rxdb-' + timeString.padStart(15, '0') + '-' + docData[primaryKey];\n}\n\nexport function stripServerTimestampField<RxDocType>(\n    serverTimestampField: string,\n    docData: RxDocType\n): WithDeleted<RxDocType> {\n    const data = flatClone(docData);\n    delete (data as any)[serverTimestampField];\n    return data as any;\n}\n\n\nexport function serverTimestampToIsoString(serverTimestampField: string, docData: any): string {\n    const timestamp = (docData as any)[serverTimestampField];\n    const date: Date = timestamp.toDate();\n    return date.toISOString();\n}\n\nexport function isoStringToServerTimestamp(isoString: string): Timestamp {\n    const date = new Date(isoString);\n    return Timestamp.fromDate(date);\n}\n\nexport function firestoreRowToDocData<RxDocType>(\n    serverTimestampField: string,\n    primaryPath: string,\n    row: QueryDocumentSnapshot<RxDocType>\n): WithDeleted<RxDocType> {\n    const docData = stripServerTimestampField(\n        serverTimestampField,\n        row.data()\n    );\n    (docData as any)[primaryPath] = row.id;\n    return docData;\n}\n\nexport function stripPrimaryKey(\n    primaryPath: string,\n    docData: any\n): any {\n    docData = flatClone(docData);\n    delete (docData as any)[primaryPath];\n    return docData;\n}\n\n// https://stackoverflow.com/questions/61354866/is-there-a-workaround-for-the-firebase-query-in-limit-to-10\nexport function getContentByIds<RxDocType>(ids: string[], getQuery: GetQuery<RxDocType>): Promise<QueryDocumentSnapshot<RxDocType>[]> {\n    const batches = [];\n\n    while (ids.length) {\n        // firestore limits batches to 10\n        const batch = ids.splice(0, 10);\n\n        // add the batch request to to a queue\n        batches.push(getQuery(batch));\n    }\n\n    // after all of the data is fetched, return it\n    return Promise.all(batches).then((content) => content.map(i => i.docs).flat());\n}\n"],"mappings":"AAAA,SAEIA,SAAS,QACN,oBAAoB;AAI3B,SAASC,SAAS,EAAEC,GAAG,QAAQ,8BAA8B;AAI7D,OAAO,SAASC,0BAA0BA,CAACC,OAAY,EAAEC,UAAkB,EAAU;EACjF,IAAMC,UAAU,GAAGJ,GAAG,CAAC,CAAC,GAAG,EAAE;EAC7B,OAAO,OAAO,GAAGI,UAAU,CAACC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,GAAG,GAAGH,OAAO,CAACC,UAAU,CAAC;AAC7E;AAEA,OAAO,SAASG,yBAAyBA,CACrCC,oBAA4B,EAC5BL,OAAkB,EACI;EACtB,IAAMM,IAAI,GAAGT,SAAS,CAACG,OAAO,CAAC;EAC/B,OAAQM,IAAI,CAASD,oBAAoB,CAAC;EAC1C,OAAOC,IAAI;AACf;AAGA,OAAO,SAASC,0BAA0BA,CAACF,oBAA4B,EAAEL,OAAY,EAAU;EAC3F,IAAMQ,SAAS,GAAIR,OAAO,CAASK,oBAAoB,CAAC;EACxD,IAAMI,IAAU,GAAGD,SAAS,CAACE,MAAM,CAAC,CAAC;EACrC,OAAOD,IAAI,CAACE,WAAW,CAAC,CAAC;AAC7B;AAEA,OAAO,SAASC,0BAA0BA,CAACC,SAAiB,EAAa;EACrE,IAAMJ,IAAI,GAAG,IAAIK,IAAI,CAACD,SAAS,CAAC;EAChC,OAAOjB,SAAS,CAACmB,QAAQ,CAACN,IAAI,CAAC;AACnC;AAEA,OAAO,SAASO,qBAAqBA,CACjCX,oBAA4B,EAC5BY,WAAmB,EACnBC,GAAqC,EACf;EACtB,IAAMlB,OAAO,GAAGI,yBAAyB,CACrCC,oBAAoB,EACpBa,GAAG,CAACZ,IAAI,CAAC,CACb,CAAC;EACAN,OAAO,CAASiB,WAAW,CAAC,GAAGC,GAAG,CAACC,EAAE;EACtC,OAAOnB,OAAO;AAClB;AAEA,OAAO,SAASoB,eAAeA,CAC3BH,WAAmB,EACnBjB,OAAY,EACT;EACHA,OAAO,GAAGH,SAAS,CAACG,OAAO,CAAC;EAC5B,OAAQA,OAAO,CAASiB,WAAW,CAAC;EACpC,OAAOjB,OAAO;AAClB;;AAEA;AACA,OAAO,SAASqB,eAAeA,CAAYC,GAAa,EAAEC,QAA6B,EAA+C;EAClI,IAAMC,OAAO,GAAG,EAAE;EAElB,OAAOF,GAAG,CAACG,MAAM,EAAE;IACf;IACA,IAAMC,KAAK,GAAGJ,GAAG,CAACK,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC;;IAE/B;IACAH,OAAO,CAACI,IAAI,CAACL,QAAQ,CAACG,KAAK,CAAC,CAAC;EACjC;;EAEA;EACA,OAAOG,OAAO,CAACC,GAAG,CAACN,OAAO,CAAC,CAACO,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;AAClF","ignoreList":[]}
\ No newline at end of file
diff --git a/node_modules/rxdb/dist/esm/plugins/replication-firestore/firestore-types.js b/node_modules/rxdb/dist/esm/plugins/replication-firestore/firestore-types.js
deleted file mode 100644
index 84d820d..0000000
--- a/node_modules/rxdb/dist/esm/plugins/replication-firestore/firestore-types.js
+++ /dev/null
@@ -1,3 +0,0 @@
-export {};
-export {};
-//# sourceMappingURL=firestore-types.js.map
\ No newline at end of file
diff --git a/node_modules/rxdb/dist/esm/plugins/replication-firestore/firestore-types.js.map b/node_modules/rxdb/dist/esm/plugins/replication-firestore/firestore-types.js.map
deleted file mode 100644
index 4af79d8..0000000
--- a/node_modules/rxdb/dist/esm/plugins/replication-firestore/firestore-types.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"firestore-types.js","names":[],"sources":["../../../../src/plugins/replication-firestore/firestore-types.ts"],"sourcesContent":["import type {\n    MaybePromise,\n    ReplicationOptions,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    WithDeleted\n} from '../../types/index.d.ts';\n\nimport type {\n    CollectionReference,\n    Firestore,\n    QueryFieldFilterConstraint,\n    QuerySnapshot\n} from 'firebase/firestore';\n\nexport type FirestoreCheckpointType = {\n    id: string;\n    /**\n     * Firestore internally sets the time to an object like\n     * {\n     *       \"seconds\": 1669807105,\n     *       \"nanoseconds\": 476000000\n     * }\n     * But to be able to query that, we have to use a date string\n     * like '2022-11-30T11:18:25.141Z'\n     * so we store that string instead.\n     */\n    serverTimestamp: string;\n};\nexport type FirestoreCollection<RxDocType> = CollectionReference<RxDocType>;\n\nexport type FirestoreOptions<RxDocType> = {\n    projectId: string;\n    collection: FirestoreCollection<RxDocType>;\n    database: Firestore;\n};\n\nexport type FirestoreSyncPullOptions<RxDocType> =\n    Omit<ReplicationPullOptions<RxDocType, FirestoreCheckpointType>, 'handler' | 'stream$'>\n    & {\n        filter?: QueryFieldFilterConstraint | QueryFieldFilterConstraint[];\n    };\n\nexport type FirestoreSyncPushOptions<RxDocType> = Omit<ReplicationPushOptions<RxDocType>, 'handler'>\n    & {\n        filter?(item: WithDeleted<RxDocType>): MaybePromise<boolean>;\n    };\n\nexport type SyncOptionsFirestore<RxDocType> = Omit<\n    ReplicationOptions<RxDocType, any>,\n    'pull' | 'push'\n> & {\n    firestore: FirestoreOptions<RxDocType>;\n    /**\n     * In firestore it is not possible to read out\n     * the internally used write timestamp.\n     * Even if we could read it out, it is not indexed which\n     * is required for fetch 'changes-since-x'.\n     * So instead we have to rely on a custom user defined field\n     * that contains the server time which is set by firestore via serverTimestamp()\n     * IMPORTANT: The serverTimestampField MUST NOT be part of the collections RxJsonSchema!\n     * [default='serverTimestamp']\n     * @link https://groups.google.com/g/firebase-talk/c/tAmPzPei-mE\n     */\n    serverTimestampField?: string;\n    pull?: FirestoreSyncPullOptions<RxDocType>;\n    push?: FirestoreSyncPushOptions<RxDocType>;\n};\n\nexport type GetQuery<RxDocType> = (ids: string[]) => Promise<QuerySnapshot<RxDocType>>;\n"],"mappings":"","ignoreList":[]}
\ No newline at end of file
diff --git a/node_modules/rxdb/dist/esm/plugins/replication-firestore/index.js b/node_modules/rxdb/dist/esm/plugins/replication-firestore/index.js
deleted file mode 100644
index b7c5834..0000000
--- a/node_modules/rxdb/dist/esm/plugins/replication-firestore/index.js
+++ /dev/null
@@ -1,228 +0,0 @@
-import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
-import { appendToArray, asyncFilter, ensureNotFalsy, errorToPlainJson, flatClone, lastOfArray, toArray } from "../../plugins/utils/index.js";
-import { doc, query, where, orderBy, limit, getDocs, onSnapshot, runTransaction, writeBatch, serverTimestamp, waitForPendingWrites, documentId } from 'firebase/firestore';
-import { RxDBLeaderElectionPlugin } from "../leader-election/index.js";
-import { RxReplicationState, startReplicationOnLeaderShip } from "../replication/index.js";
-import { addRxPlugin, getSchemaByObjectPath, newRxError } from "../../index.js";
-import { Subject } from 'rxjs';
-import { firestoreRowToDocData, getContentByIds, isoStringToServerTimestamp, serverTimestampToIsoString, stripPrimaryKey, stripServerTimestampField } from "./firestore-helper.js";
-export * from "./firestore-helper.js";
-export * from "./firestore-types.js";
-export var RxFirestoreReplicationState = /*#__PURE__*/function (_RxReplicationState) {
-  function RxFirestoreReplicationState(firestore, replicationIdentifierHash, collection, pull, push, live = true, retryTime = 1000 * 5, autoStart = true) {
-    var _this;
-    _this = _RxReplicationState.call(this, replicationIdentifierHash, collection, '_deleted', pull, push, live, retryTime, autoStart) || this;
-    _this.firestore = firestore;
-    _this.replicationIdentifierHash = replicationIdentifierHash;
-    _this.collection = collection;
-    _this.pull = pull;
-    _this.push = push;
-    _this.live = live;
-    _this.retryTime = retryTime;
-    _this.autoStart = autoStart;
-    return _this;
-  }
-  _inheritsLoose(RxFirestoreReplicationState, _RxReplicationState);
-  return RxFirestoreReplicationState;
-}(RxReplicationState);
-export function replicateFirestore(options) {
-  var collection = options.collection;
-  addRxPlugin(RxDBLeaderElectionPlugin);
-  var pullStream$ = new Subject();
-  var replicationPrimitivesPull;
-  options.live = typeof options.live === 'undefined' ? true : options.live;
-  options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;
-  var serverTimestampField = typeof options.serverTimestampField === 'undefined' ? 'serverTimestamp' : options.serverTimestampField;
-  options.serverTimestampField = serverTimestampField;
-  var primaryPath = collection.schema.primaryPath;
-
-  /**
-   * The serverTimestampField MUST NOT be part of the collections RxJsonSchema.
-   */
-  var schemaPart = getSchemaByObjectPath(collection.schema.jsonSchema, serverTimestampField);
-  if (schemaPart ||
-  // also must not be nested.
-  serverTimestampField.includes('.')) {
-    throw newRxError('RC6', {
-      field: serverTimestampField,
-      schema: collection.schema.jsonSchema
-    });
-  }
-  var pullFilters = options.pull?.filter !== undefined ? toArray(options.pull.filter) : [];
-  var pullQuery = query(options.firestore.collection, ...pullFilters);
-  if (options.pull) {
-    replicationPrimitivesPull = {
-      async handler(lastPulledCheckpoint, batchSize) {
-        var newerQuery;
-        var sameTimeQuery;
-        if (lastPulledCheckpoint) {
-          var lastServerTimestamp = isoStringToServerTimestamp(lastPulledCheckpoint.serverTimestamp);
-          newerQuery = query(pullQuery, where(serverTimestampField, '>', lastServerTimestamp), orderBy(serverTimestampField, 'asc'), limit(batchSize));
-          sameTimeQuery = query(pullQuery, where(serverTimestampField, '==', lastServerTimestamp), where(primaryPath, '>', lastPulledCheckpoint.id), orderBy(primaryPath, 'asc'), limit(batchSize));
-        } else {
-          newerQuery = query(pullQuery, orderBy(serverTimestampField, 'asc'), limit(batchSize));
-        }
-        var mustsReRun = true;
-        var useDocs = [];
-        while (mustsReRun) {
-          /**
-           * Local writes that have not been persisted to the server
-           * are in pending state and do not have a correct serverTimestamp set.
-           * We have to ensure we only use document states that are in sync with the server.
-           * @link https://medium.com/firebase-developers/the-secrets-of-firestore-fieldvalue-servertimestamp-revealed-29dd7a38a82b
-           */
-          await waitForPendingWrites(options.firestore.database);
-          await runTransaction(options.firestore.database, async _tx => {
-            useDocs = [];
-            var [newerQueryResult, sameTimeQueryResult] = await Promise.all([getDocs(newerQuery), sameTimeQuery ? getDocs(sameTimeQuery) : undefined]);
-            if (newerQueryResult.metadata.hasPendingWrites || sameTimeQuery && ensureNotFalsy(sameTimeQueryResult).metadata.hasPendingWrites) {
-              return;
-            } else {
-              mustsReRun = false;
-              if (sameTimeQuery) {
-                useDocs = ensureNotFalsy(sameTimeQueryResult).docs;
-              }
-              var missingAmount = batchSize - useDocs.length;
-              if (missingAmount > 0) {
-                var additionalDocs = newerQueryResult.docs.slice(0, missingAmount).filter(x => !!x);
-                appendToArray(useDocs, additionalDocs);
-              }
-            }
-          });
-        }
-        if (useDocs.length === 0) {
-          return {
-            checkpoint: lastPulledCheckpoint ?? null,
-            documents: []
-          };
-        }
-        var lastDoc = ensureNotFalsy(lastOfArray(useDocs));
-        var documents = useDocs.map(row => firestoreRowToDocData(serverTimestampField, primaryPath, row));
-        var newCheckpoint = {
-          id: lastDoc.id,
-          serverTimestamp: serverTimestampToIsoString(serverTimestampField, lastDoc.data())
-        };
-        var ret = {
-          documents: documents,
-          checkpoint: newCheckpoint
-        };
-        return ret;
-      },
-      batchSize: ensureNotFalsy(options.pull).batchSize,
-      modifier: ensureNotFalsy(options.pull).modifier,
-      stream$: pullStream$.asObservable()
-    };
-  }
-  var replicationPrimitivesPush;
-  if (options.push) {
-    var pushFilter = options.push?.filter;
-    replicationPrimitivesPush = {
-      async handler(rows) {
-        if (pushFilter !== undefined) {
-          rows = await asyncFilter(rows, row => pushFilter(row.newDocumentState));
-        }
-        var writeRowsById = {};
-        var docIds = rows.map(row => {
-          var docId = row.newDocumentState[primaryPath];
-          writeRowsById[docId] = row;
-          return docId;
-        });
-        await waitForPendingWrites(options.firestore.database);
-        var conflicts = [];
-
-        /**
-         * Everything must run INSIDE of the transaction
-         * because on tx-errors, firebase will re-run the transaction on some cases.
-         * @link https://firebase.google.com/docs/firestore/manage-data/transactions#transaction_failure
-         * @link https://firebase.google.com/docs/firestore/manage-data/transactions
-         */
-        await runTransaction(options.firestore.database, async _tx => {
-          conflicts = []; // reset in case the tx has re-run.
-          /**
-           * @link https://stackoverflow.com/a/48423626/3443137
-           */
-
-          var getQuery = ids => {
-            return getDocs(query(options.firestore.collection, where(documentId(), 'in', ids)));
-          };
-          var docsInDbResult = await getContentByIds(docIds, getQuery);
-          var docsInDbById = {};
-          docsInDbResult.forEach(row => {
-            var docDataInDb = stripServerTimestampField(serverTimestampField, row.data());
-            var docId = row.id;
-            docDataInDb[primaryPath] = docId;
-            docsInDbById[docId] = docDataInDb;
-          });
-
-          /**
-           * @link https://firebase.google.com/docs/firestore/manage-data/transactions#batched-writes
-           */
-          var batch = writeBatch(options.firestore.database);
-          var hasWrite = false;
-          await Promise.all(Object.entries(writeRowsById).map(async ([docId, writeRow]) => {
-            var docInDb = docsInDbById[docId];
-            if (docInDb && (!writeRow.assumedMasterState || (await collection.conflictHandler({
-              newDocumentState: docInDb,
-              realMasterState: writeRow.assumedMasterState
-            }, 'replication-firestore-push')).isEqual === false)) {
-              // conflict
-              conflicts.push(docInDb);
-            } else {
-              // no conflict
-              hasWrite = true;
-              var docRef = doc(options.firestore.collection, docId);
-              var writeDocData = flatClone(writeRow.newDocumentState);
-              writeDocData[serverTimestampField] = serverTimestamp();
-              if (!docInDb) {
-                // insert
-                batch.set(docRef, stripPrimaryKey(primaryPath, writeDocData));
-              } else {
-                // update
-                batch.update(docRef, stripPrimaryKey(primaryPath, writeDocData));
-              }
-            }
-          }));
-          if (hasWrite) {
-            await batch.commit();
-          }
-        });
-        await waitForPendingWrites(options.firestore.database);
-        return conflicts;
-      },
-      batchSize: options.push.batchSize,
-      modifier: options.push.modifier
-    };
-  }
-  var replicationState = new RxFirestoreReplicationState(options.firestore, options.replicationIdentifier, collection, replicationPrimitivesPull, replicationPrimitivesPush, options.live, options.retryTime, options.autoStart);
-
-  /**
-   * Use long polling to get live changes for the pull.stream$
-   */
-  if (options.live && options.pull) {
-    var startBefore = replicationState.start.bind(replicationState);
-    var cancelBefore = replicationState.cancel.bind(replicationState);
-    replicationState.start = () => {
-      var lastChangeQuery = query(pullQuery, orderBy(serverTimestampField, 'desc'), limit(1));
-      var unsubscribe = onSnapshot(lastChangeQuery, _querySnapshot => {
-        /**
-         * There is no good way to observe the event stream in firestore.
-         * So instead we listen to any write to the collection
-         * and then emit a 'RESYNC' flag.
-         */
-        replicationState.reSync();
-      }, error => {
-        replicationState.subjects.error.next(newRxError('RC_STREAM', {
-          error: errorToPlainJson(error)
-        }));
-      });
-      replicationState.cancel = () => {
-        unsubscribe();
-        return cancelBefore();
-      };
-      return startBefore();
-    };
-  }
-  startReplicationOnLeaderShip(options.waitForLeadership, replicationState);
-  return replicationState;
-}
-//# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/rxdb/dist/esm/plugins/replication-firestore/index.js.map b/node_modules/rxdb/dist/esm/plugins/replication-firestore/index.js.map
deleted file mode 100644
index 3c209d6..0000000
--- a/node_modules/rxdb/dist/esm/plugins/replication-firestore/index.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"index.js","names":["appendToArray","asyncFilter","ensureNotFalsy","errorToPlainJson","flatClone","lastOfArray","toArray","doc","query","where","orderBy","limit","getDocs","onSnapshot","runTransaction","writeBatch","serverTimestamp","waitForPendingWrites","documentId","RxDBLeaderElectionPlugin","RxReplicationState","startReplicationOnLeaderShip","addRxPlugin","getSchemaByObjectPath","newRxError","Subject","firestoreRowToDocData","getContentByIds","isoStringToServerTimestamp","serverTimestampToIsoString","stripPrimaryKey","stripServerTimestampField","RxFirestoreReplicationState","_RxReplicationState","firestore","replicationIdentifierHash","collection","pull","push","live","retryTime","autoStart","_this","call","_inheritsLoose","replicateFirestore","options","pullStream$","replicationPrimitivesPull","waitForLeadership","serverTimestampField","primaryPath","schema","schemaPart","jsonSchema","includes","field","pullFilters","filter","undefined","pullQuery","handler","lastPulledCheckpoint","batchSize","newerQuery","sameTimeQuery","lastServerTimestamp","id","mustsReRun","useDocs","database","_tx","newerQueryResult","sameTimeQueryResult","Promise","all","metadata","hasPendingWrites","docs","missingAmount","length","additionalDocs","slice","x","checkpoint","documents","lastDoc","map","row","newCheckpoint","data","ret","modifier","stream$","asObservable","replicationPrimitivesPush","pushFilter","rows","newDocumentState","writeRowsById","docIds","docId","conflicts","getQuery","ids","docsInDbResult","docsInDbById","forEach","docDataInDb","batch","hasWrite","Object","entries","writeRow","docInDb","assumedMasterState","conflictHandler","realMasterState","isEqual","docRef","writeDocData","set","update","commit","replicationState","replicationIdentifier","startBefore","start","bind","cancelBefore","cancel","lastChangeQuery","unsubscribe","_querySnapshot","reSync","error","subjects","next"],"sources":["../../../../src/plugins/replication-firestore/index.ts"],"sourcesContent":["import {\n    appendToArray,\n    asyncFilter,\n    ensureNotFalsy,\n    errorToPlainJson,\n    flatClone,\n    lastOfArray,\n    toArray\n} from '../../plugins/utils/index.ts';\n\nimport {\n    doc,\n    query,\n    where,\n    orderBy,\n    limit,\n    getDocs,\n    onSnapshot,\n    runTransaction,\n    writeBatch,\n    serverTimestamp,\n    QueryDocumentSnapshot,\n    waitForPendingWrites,\n    documentId\n} from 'firebase/firestore';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\nimport type {\n    RxCollection,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    RxReplicationPullStreamItem\n} from '../../types/index.d.ts';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication/index.ts';\nimport {\n    addRxPlugin,\n    ById,\n    getSchemaByObjectPath,\n    newRxError,\n    WithDeleted\n} from '../../index.ts';\n\nimport type {\n    FirestoreCheckpointType,\n    FirestoreOptions,\n    SyncOptionsFirestore\n} from './firestore-types.ts';\nimport { Subject } from 'rxjs';\nimport {\n    firestoreRowToDocData,\n    getContentByIds,\n    isoStringToServerTimestamp,\n    serverTimestampToIsoString,\n    stripPrimaryKey,\n    stripServerTimestampField\n} from './firestore-helper.ts';\n\nexport * from './firestore-helper.ts';\nexport * from './firestore-types.ts';\n\nexport class RxFirestoreReplicationState<RxDocType> extends RxReplicationState<RxDocType, FirestoreCheckpointType> {\n    constructor(\n        public readonly firestore: FirestoreOptions<RxDocType>,\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly pull?: ReplicationPullOptions<RxDocType, FirestoreCheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live: boolean = true,\n        public retryTime: number = 1000 * 5,\n        public autoStart: boolean = true\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            '_deleted',\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n}\n\nexport function replicateFirestore<RxDocType>(\n    options: SyncOptionsFirestore<RxDocType>\n): RxFirestoreReplicationState<RxDocType> {\n    const collection = options.collection;\n    addRxPlugin(RxDBLeaderElectionPlugin);\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, FirestoreCheckpointType>> = new Subject();\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, FirestoreCheckpointType> | undefined;\n    options.live = typeof options.live === 'undefined' ? true : options.live;\n    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\n    const serverTimestampField = typeof options.serverTimestampField === 'undefined' ? 'serverTimestamp' : options.serverTimestampField;\n    options.serverTimestampField = serverTimestampField;\n    const primaryPath = collection.schema.primaryPath;\n\n    /**\n     * The serverTimestampField MUST NOT be part of the collections RxJsonSchema.\n     */\n    const schemaPart = getSchemaByObjectPath(collection.schema.jsonSchema, serverTimestampField);\n    if (\n        schemaPart ||\n        // also must not be nested.\n        serverTimestampField.includes('.')\n    ) {\n        throw newRxError('RC6', {\n            field: serverTimestampField,\n            schema: collection.schema.jsonSchema\n        });\n    }\n\n    const pullFilters = options.pull?.filter !== undefined\n        ? toArray(options.pull.filter)\n        : [];\n\n    const pullQuery = query(options.firestore.collection, ...pullFilters);\n\n    if (options.pull) {\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: FirestoreCheckpointType | undefined,\n                batchSize: number\n            ) {\n                let newerQuery: ReturnType<typeof query>;\n                let sameTimeQuery: ReturnType<typeof query> | undefined;\n\n                if (lastPulledCheckpoint) {\n                    const lastServerTimestamp = isoStringToServerTimestamp(lastPulledCheckpoint.serverTimestamp);\n                    newerQuery = query(pullQuery,\n                        where(serverTimestampField, '>', lastServerTimestamp),\n                        orderBy(serverTimestampField, 'asc'),\n                        limit(batchSize)\n                    );\n                    sameTimeQuery = query(pullQuery,\n                        where(serverTimestampField, '==', lastServerTimestamp),\n                        where(primaryPath, '>', lastPulledCheckpoint.id),\n                        orderBy(primaryPath, 'asc'),\n                        limit(batchSize)\n                    );\n                } else {\n                    newerQuery = query(pullQuery,\n                        orderBy(serverTimestampField, 'asc'),\n                        limit(batchSize)\n                    );\n                }\n\n                let mustsReRun = true;\n                let useDocs: QueryDocumentSnapshot<RxDocType>[] = [];\n                while (mustsReRun) {\n                    /**\n                     * Local writes that have not been persisted to the server\n                     * are in pending state and do not have a correct serverTimestamp set.\n                     * We have to ensure we only use document states that are in sync with the server.\n                     * @link https://medium.com/firebase-developers/the-secrets-of-firestore-fieldvalue-servertimestamp-revealed-29dd7a38a82b\n                     */\n                    await waitForPendingWrites(options.firestore.database);\n                    await runTransaction(options.firestore.database, async (_tx) => {\n                        useDocs = [];\n                        const [\n                            newerQueryResult,\n                            sameTimeQueryResult\n                        ] = await Promise.all([\n                            getDocs(newerQuery),\n                            sameTimeQuery ? getDocs(sameTimeQuery) : undefined\n                        ]);\n\n                        if (\n                            newerQueryResult.metadata.hasPendingWrites ||\n                            (sameTimeQuery && ensureNotFalsy(sameTimeQueryResult).metadata.hasPendingWrites)\n                        ) {\n                            return;\n                        } else {\n                            mustsReRun = false;\n\n                            if (sameTimeQuery) {\n                                useDocs = ensureNotFalsy(sameTimeQueryResult).docs as any;\n                            }\n                            const missingAmount = batchSize - useDocs.length;\n                            if (missingAmount > 0) {\n                                const additionalDocs = newerQueryResult.docs.slice(0, missingAmount).filter(x => !!x);\n                                appendToArray(useDocs, additionalDocs);\n                            }\n                        }\n                    });\n                }\n\n                if (useDocs.length === 0) {\n                    return {\n                        checkpoint: lastPulledCheckpoint ?? null,\n                        documents: []\n                    };\n                }\n                const lastDoc = ensureNotFalsy(lastOfArray(useDocs));\n                const documents: WithDeleted<RxDocType>[] = useDocs\n                    .map(row => firestoreRowToDocData(\n                        serverTimestampField,\n                        primaryPath,\n                        row\n                    ));\n                const newCheckpoint: FirestoreCheckpointType = {\n                    id: lastDoc.id,\n                    serverTimestamp: serverTimestampToIsoString(serverTimestampField, lastDoc.data())\n                };\n                const ret = {\n                    documents: documents,\n                    checkpoint: newCheckpoint\n                };\n                return ret;\n            },\n            batchSize: ensureNotFalsy(options.pull).batchSize,\n            modifier: ensureNotFalsy(options.pull).modifier,\n            stream$: pullStream$.asObservable()\n        };\n    }\n\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (options.push) {\n        const pushFilter = options.push?.filter;\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                if (pushFilter !== undefined) {\n                    rows = await asyncFilter(rows, (row) => pushFilter(row.newDocumentState));\n                }\n\n                const writeRowsById: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\n                const docIds: string[] = rows.map(row => {\n                    const docId = (row.newDocumentState as any)[primaryPath];\n                    writeRowsById[docId] = row;\n                    return docId;\n                });\n                await waitForPendingWrites(options.firestore.database);\n                let conflicts: WithDeleted<RxDocType>[] = [];\n\n                /**\n                 * Everything must run INSIDE of the transaction\n                 * because on tx-errors, firebase will re-run the transaction on some cases.\n                 * @link https://firebase.google.com/docs/firestore/manage-data/transactions#transaction_failure\n                 * @link https://firebase.google.com/docs/firestore/manage-data/transactions\n                 */\n                await runTransaction(options.firestore.database, async (_tx) => {\n                    conflicts = []; // reset in case the tx has re-run.\n                    /**\n                     * @link https://stackoverflow.com/a/48423626/3443137\n                     */\n\n                    const getQuery = (ids: string[]) => {\n                        return getDocs(\n                            query(\n                                options.firestore.collection,\n                                where(documentId(), 'in', ids)\n                            )\n                        );\n                    };\n\n                    const docsInDbResult = await getContentByIds<RxDocType>(docIds, getQuery);\n\n                    const docsInDbById: ById<RxDocType> = {};\n                    docsInDbResult.forEach(row => {\n                        const docDataInDb = stripServerTimestampField(serverTimestampField, row.data());\n                        const docId = row.id;\n                        (docDataInDb as any)[primaryPath] = docId;\n                        docsInDbById[docId] = docDataInDb;\n                    });\n\n                    /**\n                     * @link https://firebase.google.com/docs/firestore/manage-data/transactions#batched-writes\n                     */\n                    const batch = writeBatch(options.firestore.database);\n                    let hasWrite = false;\n                    await Promise.all(\n                        Object.entries(writeRowsById).map(async ([docId, writeRow]) => {\n                            const docInDb: RxDocType | undefined = docsInDbById[docId];\n\n                            if (\n                                docInDb &&\n                                (\n                                    !writeRow.assumedMasterState ||\n                                    (await collection.conflictHandler({\n                                        newDocumentState: docInDb as any,\n                                        realMasterState: writeRow.assumedMasterState\n                                    }, 'replication-firestore-push')).isEqual === false\n                                )\n                            ) {\n                                // conflict\n                                conflicts.push(docInDb as any);\n                            } else {\n                                // no conflict\n                                hasWrite = true;\n                                const docRef = doc(options.firestore.collection, docId);\n                                const writeDocData = flatClone(writeRow.newDocumentState);\n                                (writeDocData as any)[serverTimestampField] = serverTimestamp();\n                                if (!docInDb) {\n                                    // insert\n                                    batch.set(docRef, stripPrimaryKey(primaryPath, writeDocData));\n                                } else {\n                                    // update\n                                    batch.update(docRef, stripPrimaryKey(primaryPath, writeDocData));\n                                }\n                            }\n                        })\n                    );\n\n                    if (hasWrite) {\n                        await batch.commit();\n                    }\n                });\n                await waitForPendingWrites(options.firestore.database);\n                return conflicts;\n            },\n            batchSize: options.push.batchSize,\n            modifier: options.push.modifier\n        };\n    }\n\n\n    const replicationState = new RxFirestoreReplicationState<RxDocType>(\n        options.firestore,\n        options.replicationIdentifier,\n        collection,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        options.live,\n        options.retryTime,\n        options.autoStart\n    );\n\n    /**\n     * Use long polling to get live changes for the pull.stream$\n     */\n    if (options.live && options.pull) {\n        const startBefore = replicationState.start.bind(replicationState);\n        const cancelBefore = replicationState.cancel.bind(replicationState);\n        replicationState.start = () => {\n            const lastChangeQuery = query(\n                pullQuery,\n                orderBy(serverTimestampField, 'desc'),\n                limit(1)\n            );\n            const unsubscribe = onSnapshot(\n                lastChangeQuery,\n                (_querySnapshot) => {\n                    /**\n                     * There is no good way to observe the event stream in firestore.\n                     * So instead we listen to any write to the collection\n                     * and then emit a 'RESYNC' flag.\n                     */\n                    replicationState.reSync();\n                },\n                (error) => {\n                    replicationState.subjects.error.next(\n                        newRxError('RC_STREAM', { error: errorToPlainJson(error) })\n                    );\n                }\n            );\n            replicationState.cancel = () => {\n                unsubscribe();\n                return cancelBefore();\n            };\n            return startBefore();\n        };\n    }\n\n    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);\n\n    return replicationState;\n}\n"],"mappings":"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","ignoreList":[]}
\ No newline at end of file
diff --git a/node_modules/rxdb/dist/esm/plugins/test-utils/config.js b/node_modules/rxdb/dist/esm/plugins/test-utils/config.js
index c260062..7a60cf2 100644
--- a/node_modules/rxdb/dist/esm/plugins/test-utils/config.js
+++ b/node_modules/rxdb/dist/esm/plugins/test-utils/config.js
@@ -2,7 +2,6 @@
 import { ensureNotFalsy, isPromise, randomCouchString } from "../utils/index.js";
 import { enforceOptions as broadcastChannelEnforceOptions } from 'broadcast-channel';
 import events from 'node:events';
-import { wrappedKeyEncryptionCryptoJsStorage } from "../encryption-crypto-js/index.js";
 export var isDeno = typeof window !== 'undefined' && 'Deno' in window;
 export var isBun = typeof process !== 'undefined' && !!process.versions.bun;
 export var isNode = !isDeno && !isBun && typeof window === 'undefined';
@@ -82,12 +81,6 @@ export function initTestEnvironment() {
     };
   }
 }
-export function getEncryptedStorage(baseStorage = getConfig().storage.getStorage()) {
-  var ret = config.storage.hasEncryption ? baseStorage : wrappedKeyEncryptionCryptoJsStorage({
-    storage: baseStorage
-  });
-  return ret;
-}
 export function isNotOneOfTheseStorages(storageNames) {
   var isName = getConfig().storage.name;
   if (storageNames.includes(isName)) {
diff --git a/node_modules/rxdb/dist/types/plugins/encryption-crypto-js/index.d.ts b/node_modules/rxdb/dist/types/plugins/encryption-crypto-js/index.d.ts
deleted file mode 100644
index daddfb4..0000000
--- a/node_modules/rxdb/dist/types/plugins/encryption-crypto-js/index.d.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-import type { InternalStoreDocType, RxStorage } from '../../types/index.d.ts';
-export declare const MINIMUM_PASSWORD_LENGTH: 8;
-export declare function encryptString(value: string, password: string): string;
-export declare function decryptString(cipherText: string, password: any): string;
-export type InternalStorePasswordDocType = InternalStoreDocType<{
-    hash: string;
-}>;
-export declare function wrappedKeyEncryptionCryptoJsStorage<Internals, InstanceCreationOptions>(args: {
-    storage: RxStorage<Internals, InstanceCreationOptions>;
-}): RxStorage<Internals, InstanceCreationOptions>;
diff --git a/node_modules/rxdb/dist/types/plugins/replication-firestore/firestore-helper.d.ts b/node_modules/rxdb/dist/types/plugins/replication-firestore/firestore-helper.d.ts
deleted file mode 100644
index ba3aecb..0000000
--- a/node_modules/rxdb/dist/types/plugins/replication-firestore/firestore-helper.d.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-import { QueryDocumentSnapshot, Timestamp } from 'firebase/firestore';
-import type { WithDeleted } from '../../types/index.d.ts';
-import type { GetQuery } from './firestore-types.ts';
-export declare function getFirestoreSortFieldValue(docData: any, primaryKey: string): string;
-export declare function stripServerTimestampField<RxDocType>(serverTimestampField: string, docData: RxDocType): WithDeleted<RxDocType>;
-export declare function serverTimestampToIsoString(serverTimestampField: string, docData: any): string;
-export declare function isoStringToServerTimestamp(isoString: string): Timestamp;
-export declare function firestoreRowToDocData<RxDocType>(serverTimestampField: string, primaryPath: string, row: QueryDocumentSnapshot<RxDocType>): WithDeleted<RxDocType>;
-export declare function stripPrimaryKey(primaryPath: string, docData: any): any;
-export declare function getContentByIds<RxDocType>(ids: string[], getQuery: GetQuery<RxDocType>): Promise<QueryDocumentSnapshot<RxDocType>[]>;
diff --git a/node_modules/rxdb/dist/types/plugins/replication-firestore/firestore-types.d.ts b/node_modules/rxdb/dist/types/plugins/replication-firestore/firestore-types.d.ts
deleted file mode 100644
index 865b5bf..0000000
--- a/node_modules/rxdb/dist/types/plugins/replication-firestore/firestore-types.d.ts
+++ /dev/null
@@ -1,46 +0,0 @@
-import type { MaybePromise, ReplicationOptions, ReplicationPullOptions, ReplicationPushOptions, WithDeleted } from '../../types/index.d.ts';
-import type { CollectionReference, Firestore, QueryFieldFilterConstraint, QuerySnapshot } from 'firebase/firestore';
-export type FirestoreCheckpointType = {
-    id: string;
-    /**
-     * Firestore internally sets the time to an object like
-     * {
-     *       "seconds": 1669807105,
-     *       "nanoseconds": 476000000
-     * }
-     * But to be able to query that, we have to use a date string
-     * like '2022-11-30T11:18:25.141Z'
-     * so we store that string instead.
-     */
-    serverTimestamp: string;
-};
-export type FirestoreCollection<RxDocType> = CollectionReference<RxDocType>;
-export type FirestoreOptions<RxDocType> = {
-    projectId: string;
-    collection: FirestoreCollection<RxDocType>;
-    database: Firestore;
-};
-export type FirestoreSyncPullOptions<RxDocType> = Omit<ReplicationPullOptions<RxDocType, FirestoreCheckpointType>, 'handler' | 'stream$'> & {
-    filter?: QueryFieldFilterConstraint | QueryFieldFilterConstraint[];
-};
-export type FirestoreSyncPushOptions<RxDocType> = Omit<ReplicationPushOptions<RxDocType>, 'handler'> & {
-    filter?(item: WithDeleted<RxDocType>): MaybePromise<boolean>;
-};
-export type SyncOptionsFirestore<RxDocType> = Omit<ReplicationOptions<RxDocType, any>, 'pull' | 'push'> & {
-    firestore: FirestoreOptions<RxDocType>;
-    /**
-     * In firestore it is not possible to read out
-     * the internally used write timestamp.
-     * Even if we could read it out, it is not indexed which
-     * is required for fetch 'changes-since-x'.
-     * So instead we have to rely on a custom user defined field
-     * that contains the server time which is set by firestore via serverTimestamp()
-     * IMPORTANT: The serverTimestampField MUST NOT be part of the collections RxJsonSchema!
-     * [default='serverTimestamp']
-     * @link https://groups.google.com/g/firebase-talk/c/tAmPzPei-mE
-     */
-    serverTimestampField?: string;
-    pull?: FirestoreSyncPullOptions<RxDocType>;
-    push?: FirestoreSyncPushOptions<RxDocType>;
-};
-export type GetQuery<RxDocType> = (ids: string[]) => Promise<QuerySnapshot<RxDocType>>;
diff --git a/node_modules/rxdb/dist/types/plugins/replication-firestore/index.d.ts b/node_modules/rxdb/dist/types/plugins/replication-firestore/index.d.ts
deleted file mode 100644
index e99ab92..0000000
--- a/node_modules/rxdb/dist/types/plugins/replication-firestore/index.d.ts
+++ /dev/null
@@ -1,17 +0,0 @@
-import type { RxCollection, ReplicationPullOptions, ReplicationPushOptions } from '../../types/index.d.ts';
-import { RxReplicationState } from '../replication/index.ts';
-import type { FirestoreCheckpointType, FirestoreOptions, SyncOptionsFirestore } from './firestore-types.ts';
-export * from './firestore-helper.ts';
-export * from './firestore-types.ts';
-export declare class RxFirestoreReplicationState<RxDocType> extends RxReplicationState<RxDocType, FirestoreCheckpointType> {
-    readonly firestore: FirestoreOptions<RxDocType>;
-    readonly replicationIdentifierHash: string;
-    readonly collection: RxCollection<RxDocType>;
-    readonly pull?: ReplicationPullOptions<RxDocType, FirestoreCheckpointType> | undefined;
-    readonly push?: ReplicationPushOptions<RxDocType> | undefined;
-    readonly live: boolean;
-    retryTime: number;
-    autoStart: boolean;
-    constructor(firestore: FirestoreOptions<RxDocType>, replicationIdentifierHash: string, collection: RxCollection<RxDocType>, pull?: ReplicationPullOptions<RxDocType, FirestoreCheckpointType> | undefined, push?: ReplicationPushOptions<RxDocType> | undefined, live?: boolean, retryTime?: number, autoStart?: boolean);
-}
-export declare function replicateFirestore<RxDocType>(options: SyncOptionsFirestore<RxDocType>): RxFirestoreReplicationState<RxDocType>;
diff --git a/node_modules/rxdb/dist/types/plugins/test-utils/config.d.ts b/node_modules/rxdb/dist/types/plugins/test-utils/config.d.ts
index cc999f3..da41a66 100644
--- a/node_modules/rxdb/dist/types/plugins/test-utils/config.d.ts
+++ b/node_modules/rxdb/dist/types/plugins/test-utils/config.d.ts
@@ -12,6 +12,5 @@ export declare const ENV_VARIABLES: any;
 export declare const DEFAULT_STORAGE: string;
 export declare function isFastMode(): boolean;
 export declare function initTestEnvironment(): void;
-export declare function getEncryptedStorage(baseStorage?: RxStorage<any, any>): RxStorage<any, any>;
 export declare function isNotOneOfTheseStorages(storageNames: string[]): boolean;
 export declare function getPassword(): Promise<string>;
diff --git a/node_modules/rxdb/plugins/encryption-crypto-js/index.cjs b/node_modules/rxdb/plugins/encryption-crypto-js/index.cjs
deleted file mode 100644
index c8147a9..0000000
--- a/node_modules/rxdb/plugins/encryption-crypto-js/index.cjs
+++ /dev/null
@@ -1,2 +0,0 @@
-const pkg = require('../../dist/cjs/plugins/encryption-crypto-js/index.js');
-module.exports = pkg;
diff --git a/node_modules/rxdb/plugins/encryption-crypto-js/index.d.cts b/node_modules/rxdb/plugins/encryption-crypto-js/index.d.cts
deleted file mode 100644
index 1a6b654..0000000
--- a/node_modules/rxdb/plugins/encryption-crypto-js/index.d.cts
+++ /dev/null
@@ -1 +0,0 @@
-export * from '../../dist/types/plugins/encryption-crypto-js/index';
diff --git a/node_modules/rxdb/plugins/encryption-crypto-js/index.d.mts b/node_modules/rxdb/plugins/encryption-crypto-js/index.d.mts
deleted file mode 100644
index 1a6b654..0000000
--- a/node_modules/rxdb/plugins/encryption-crypto-js/index.d.mts
+++ /dev/null
@@ -1 +0,0 @@
-export * from '../../dist/types/plugins/encryption-crypto-js/index';
diff --git a/node_modules/rxdb/plugins/encryption-crypto-js/index.mjs b/node_modules/rxdb/plugins/encryption-crypto-js/index.mjs
deleted file mode 100644
index a166abd..0000000
--- a/node_modules/rxdb/plugins/encryption-crypto-js/index.mjs
+++ /dev/null
@@ -1 +0,0 @@
-export * from '../../dist/esm/plugins/encryption-crypto-js/index.js';
diff --git a/node_modules/rxdb/plugins/encryption-crypto-js/index.ts b/node_modules/rxdb/plugins/encryption-crypto-js/index.ts
deleted file mode 100644
index 1a6b654..0000000
--- a/node_modules/rxdb/plugins/encryption-crypto-js/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export * from '../../dist/types/plugins/encryption-crypto-js/index';
diff --git a/node_modules/rxdb/plugins/encryption-crypto-js/package.json b/node_modules/rxdb/plugins/encryption-crypto-js/package.json
deleted file mode 100644
index d02cb98..0000000
--- a/node_modules/rxdb/plugins/encryption-crypto-js/package.json
+++ /dev/null
@@ -1,18 +0,0 @@
-{
-    "name": "rxdb-plugins-encryption-crypto-js",
-    "description": "This package.json file is generated by the \"npm run build:plugins\" script, do not edit it manually!",
-    "sideEffects": false,
-    "types": "../../dist/types/plugins/encryption-crypto-js/index.d.ts",
-    "exports": {
-        ".": {
-            "default": {
-                "types": "./index.d.ts",
-                "import": "./index.mjs",
-                "default": "./index.cjs"
-            }
-        },
-        "./package.json": "./package.json"
-    },
-    "main": "./index.cjs",
-    "module": "./index.mjs"
-}
\ No newline at end of file
diff --git a/node_modules/rxdb/plugins/replication-firestore/index.cjs b/node_modules/rxdb/plugins/replication-firestore/index.cjs
deleted file mode 100644
index 84dc09a..0000000
--- a/node_modules/rxdb/plugins/replication-firestore/index.cjs
+++ /dev/null
@@ -1,2 +0,0 @@
-const pkg = require('../../dist/cjs/plugins/replication-firestore/index.js');
-module.exports = pkg;
diff --git a/node_modules/rxdb/plugins/replication-firestore/index.d.cts b/node_modules/rxdb/plugins/replication-firestore/index.d.cts
deleted file mode 100644
index 2ddfb4c..0000000
--- a/node_modules/rxdb/plugins/replication-firestore/index.d.cts
+++ /dev/null
@@ -1 +0,0 @@
-export * from '../../dist/types/plugins/replication-firestore/index';
diff --git a/node_modules/rxdb/plugins/replication-firestore/index.d.mts b/node_modules/rxdb/plugins/replication-firestore/index.d.mts
deleted file mode 100644
index 2ddfb4c..0000000
--- a/node_modules/rxdb/plugins/replication-firestore/index.d.mts
+++ /dev/null
@@ -1 +0,0 @@
-export * from '../../dist/types/plugins/replication-firestore/index';
diff --git a/node_modules/rxdb/plugins/replication-firestore/index.mjs b/node_modules/rxdb/plugins/replication-firestore/index.mjs
deleted file mode 100644
index 4ceb551..0000000
--- a/node_modules/rxdb/plugins/replication-firestore/index.mjs
+++ /dev/null
@@ -1 +0,0 @@
-export * from '../../dist/esm/plugins/replication-firestore/index.js';
diff --git a/node_modules/rxdb/plugins/replication-firestore/index.ts b/node_modules/rxdb/plugins/replication-firestore/index.ts
deleted file mode 100644
index 2ddfb4c..0000000
--- a/node_modules/rxdb/plugins/replication-firestore/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export * from '../../dist/types/plugins/replication-firestore/index';
diff --git a/node_modules/rxdb/plugins/replication-firestore/package.json b/node_modules/rxdb/plugins/replication-firestore/package.json
deleted file mode 100644
index 32e6c4a..0000000
--- a/node_modules/rxdb/plugins/replication-firestore/package.json
+++ /dev/null
@@ -1,18 +0,0 @@
-{
-    "name": "rxdb-plugins-replication-firestore",
-    "description": "This package.json file is generated by the \"npm run build:plugins\" script, do not edit it manually!",
-    "sideEffects": false,
-    "types": "../../dist/types/plugins/replication-firestore/index.d.ts",
-    "exports": {
-        ".": {
-            "default": {
-                "types": "./index.d.ts",
-                "import": "./index.mjs",
-                "default": "./index.cjs"
-            }
-        },
-        "./package.json": "./package.json"
-    },
-    "main": "./index.cjs",
-    "module": "./index.mjs"
-}
\ No newline at end of file
diff --git a/node_modules/rxdb/src/plugins/encryption-crypto-js/index.ts b/node_modules/rxdb/src/plugins/encryption-crypto-js/index.ts
deleted file mode 100644
index 4c7c81e..0000000
--- a/node_modules/rxdb/src/plugins/encryption-crypto-js/index.ts
+++ /dev/null
@@ -1,204 +0,0 @@
-/**
- * this plugin adds the encryption-capabilities to rxdb
- * It's using crypto-js/aes for password-encryption
- * @link https://github.com/brix/crypto-js
- */
-import pkg from 'crypto-js';
-const { AES, enc: cryptoEnc } = pkg;
-
-import { wrapRxStorageInstance } from '../../plugin-helpers.ts';
-import { newRxError, newRxTypeError } from '../../rx-error.ts';
-import { hasEncryption } from '../../rx-storage-helper.ts';
-import type {
-    InternalStoreDocType,
-    RxAttachmentWriteData,
-    RxDocumentData,
-    RxDocumentWriteData,
-    RxJsonSchema,
-    RxStorage,
-    RxStorageInstanceCreationParams
-} from '../../types/index.d.ts';
-import {
-    b64DecodeUnicode,
-    b64EncodeUnicode,
-    clone,
-    ensureNotFalsy,
-    flatClone,
-    getProperty,
-    setProperty
-} from '../../plugins/utils/index.ts';
-
-export const MINIMUM_PASSWORD_LENGTH: 8 = 8;
-
-
-export function encryptString(value: string, password: string): string {
-    const encrypted = AES.encrypt(value, password);
-    return encrypted.toString();
-}
-
-export function decryptString(cipherText: string, password: any): string {
-    /**
-     * Trying to decrypt non-strings
-     * will cause no errors and will be hard to debug.
-     * So instead we do this check here.
-     */
-    if (typeof cipherText !== 'string') {
-        throw newRxError('SNH', {
-            args: {
-                cipherText
-            }
-        });
-    }
-
-    const decrypted = AES.decrypt(cipherText, password);
-    const ret = decrypted.toString(cryptoEnc.Utf8);
-    return ret;
-}
-
-export type InternalStorePasswordDocType = InternalStoreDocType<{
-    hash: string;
-}>;
-
-export function wrappedKeyEncryptionCryptoJsStorage<Internals, InstanceCreationOptions>(
-    args: {
-        storage: RxStorage<Internals, InstanceCreationOptions>;
-    }
-): RxStorage<Internals, InstanceCreationOptions> {
-    return Object.assign(
-        {},
-        args.storage,
-        {
-            async createStorageInstance<RxDocType>(
-                params: RxStorageInstanceCreationParams<RxDocType, any>
-            ) {
-                if (typeof params.password !== 'undefined') {
-                    validatePassword(params.password as any);
-                }
-
-                if (!hasEncryption(params.schema)) {
-                    const retInstance = await args.storage.createStorageInstance(params);
-                    return retInstance;
-                }
-
-                if (!params.password) {
-                    throw newRxError('EN3', {
-                        database: params.databaseName,
-                        collection: params.collectionName,
-                        schema: params.schema
-                    });
-                }
-                const password = params.password;
-
-                const schemaWithoutEncrypted: RxJsonSchema<RxDocumentData<RxDocType>> = clone(params.schema);
-                delete schemaWithoutEncrypted.encrypted;
-                if (schemaWithoutEncrypted.attachments) {
-                    schemaWithoutEncrypted.attachments.encrypted = false;
-                }
-
-                const instance = await args.storage.createStorageInstance(
-                    Object.assign(
-                        {},
-                        params,
-                        {
-                            schema: schemaWithoutEncrypted
-                        }
-                    )
-                );
-
-                function modifyToStorage(docData: RxDocumentWriteData<RxDocType>) {
-                    docData = cloneWithoutAttachments(docData);
-                    ensureNotFalsy(params.schema.encrypted)
-                        .forEach(path => {
-                            const value = getProperty(docData, path);
-                            if (typeof value === 'undefined') {
-                                return;
-                            }
-
-                            const stringValue = JSON.stringify(value);
-                            const encrypted = encryptString(stringValue, password);
-                            setProperty(docData, path, encrypted);
-                        });
-
-                    // handle attachments
-                    if (
-                        params.schema.attachments &&
-                        params.schema.attachments.encrypted
-                    ) {
-                        const newAttachments: typeof docData._attachments = {};
-                        Object.entries(docData._attachments).forEach(([id, attachment]) => {
-                            const useAttachment: RxAttachmentWriteData = flatClone(attachment) as any;
-                            if (useAttachment.data) {
-                                const dataString = useAttachment.data;
-                                useAttachment.data = b64EncodeUnicode(encryptString(dataString, password));
-                            }
-                            newAttachments[id] = useAttachment;
-                        });
-                        docData._attachments = newAttachments;
-                    }
-                    return docData;
-                }
-                function modifyFromStorage(docData: RxDocumentData<any>): Promise<RxDocumentData<RxDocType>> {
-                    docData = cloneWithoutAttachments(docData);
-                    ensureNotFalsy(params.schema.encrypted)
-                        .forEach(path => {
-                            const value = getProperty(docData, path);
-                            if (typeof value === 'undefined') {
-                                return;
-                            }
-                            const decrypted = decryptString(value, password);
-                            const decryptedParsed = JSON.parse(decrypted);
-                            setProperty(docData, path, decryptedParsed);
-                        });
-                    return docData;
-                }
-
-                function modifyAttachmentFromStorage(attachmentData: string): string {
-                    if (
-                        params.schema.attachments &&
-                        params.schema.attachments.encrypted
-                    ) {
-                        const decrypted = decryptString(b64DecodeUnicode(attachmentData), password);
-                        return decrypted;
-                    } else {
-                        return attachmentData;
-                    }
-                }
-
-                return wrapRxStorageInstance(
-                    params.schema,
-                    instance,
-                    modifyToStorage,
-                    modifyFromStorage,
-                    modifyAttachmentFromStorage
-                );
-            }
-        }
-    );
-}
-
-
-
-
-
-function cloneWithoutAttachments<T>(data: RxDocumentWriteData<T>): RxDocumentData<T> {
-    const attachments = data._attachments;
-    data = flatClone(data);
-    delete (data as any)._attachments;
-    data = clone(data);
-    data._attachments = attachments;
-    return data as any;
-}
-
-function validatePassword(password: string) {
-    if (typeof password !== 'string') {
-        throw newRxTypeError('EN1', {
-            password
-        });
-    }
-    if (password.length < MINIMUM_PASSWORD_LENGTH) {
-        throw newRxError('EN2', {
-            minPassLength: MINIMUM_PASSWORD_LENGTH,
-            password
-        });
-    }
-}
diff --git a/node_modules/rxdb/src/plugins/replication-firestore/firestore-helper.ts b/node_modules/rxdb/src/plugins/replication-firestore/firestore-helper.ts
deleted file mode 100644
index de74662..0000000
--- a/node_modules/rxdb/src/plugins/replication-firestore/firestore-helper.ts
+++ /dev/null
@@ -1,74 +0,0 @@
-import {
-    QueryDocumentSnapshot,
-    Timestamp
-} from 'firebase/firestore';
-import type {
-    WithDeleted
-} from '../../types/index.d.ts';
-import { flatClone, now } from '../../plugins/utils/index.ts';
-import type { GetQuery } from './firestore-types.ts';
-
-
-export function getFirestoreSortFieldValue(docData: any, primaryKey: string): string {
-    const timeString = now() + '';
-    return 'rxdb-' + timeString.padStart(15, '0') + '-' + docData[primaryKey];
-}
-
-export function stripServerTimestampField<RxDocType>(
-    serverTimestampField: string,
-    docData: RxDocType
-): WithDeleted<RxDocType> {
-    const data = flatClone(docData);
-    delete (data as any)[serverTimestampField];
-    return data as any;
-}
-
-
-export function serverTimestampToIsoString(serverTimestampField: string, docData: any): string {
-    const timestamp = (docData as any)[serverTimestampField];
-    const date: Date = timestamp.toDate();
-    return date.toISOString();
-}
-
-export function isoStringToServerTimestamp(isoString: string): Timestamp {
-    const date = new Date(isoString);
-    return Timestamp.fromDate(date);
-}
-
-export function firestoreRowToDocData<RxDocType>(
-    serverTimestampField: string,
-    primaryPath: string,
-    row: QueryDocumentSnapshot<RxDocType>
-): WithDeleted<RxDocType> {
-    const docData = stripServerTimestampField(
-        serverTimestampField,
-        row.data()
-    );
-    (docData as any)[primaryPath] = row.id;
-    return docData;
-}
-
-export function stripPrimaryKey(
-    primaryPath: string,
-    docData: any
-): any {
-    docData = flatClone(docData);
-    delete (docData as any)[primaryPath];
-    return docData;
-}
-
-// https://stackoverflow.com/questions/61354866/is-there-a-workaround-for-the-firebase-query-in-limit-to-10
-export function getContentByIds<RxDocType>(ids: string[], getQuery: GetQuery<RxDocType>): Promise<QueryDocumentSnapshot<RxDocType>[]> {
-    const batches = [];
-
-    while (ids.length) {
-        // firestore limits batches to 10
-        const batch = ids.splice(0, 10);
-
-        // add the batch request to to a queue
-        batches.push(getQuery(batch));
-    }
-
-    // after all of the data is fetched, return it
-    return Promise.all(batches).then((content) => content.map(i => i.docs).flat());
-}
diff --git a/node_modules/rxdb/src/plugins/replication-firestore/firestore-types.ts b/node_modules/rxdb/src/plugins/replication-firestore/firestore-types.ts
deleted file mode 100644
index d4c004e..0000000
--- a/node_modules/rxdb/src/plugins/replication-firestore/firestore-types.ts
+++ /dev/null
@@ -1,70 +0,0 @@
-import type {
-    MaybePromise,
-    ReplicationOptions,
-    ReplicationPullOptions,
-    ReplicationPushOptions,
-    WithDeleted
-} from '../../types/index.d.ts';
-
-import type {
-    CollectionReference,
-    Firestore,
-    QueryFieldFilterConstraint,
-    QuerySnapshot
-} from 'firebase/firestore';
-
-export type FirestoreCheckpointType = {
-    id: string;
-    /**
-     * Firestore internally sets the time to an object like
-     * {
-     *       "seconds": 1669807105,
-     *       "nanoseconds": 476000000
-     * }
-     * But to be able to query that, we have to use a date string
-     * like '2022-11-30T11:18:25.141Z'
-     * so we store that string instead.
-     */
-    serverTimestamp: string;
-};
-export type FirestoreCollection<RxDocType> = CollectionReference<RxDocType>;
-
-export type FirestoreOptions<RxDocType> = {
-    projectId: string;
-    collection: FirestoreCollection<RxDocType>;
-    database: Firestore;
-};
-
-export type FirestoreSyncPullOptions<RxDocType> =
-    Omit<ReplicationPullOptions<RxDocType, FirestoreCheckpointType>, 'handler' | 'stream$'>
-    & {
-        filter?: QueryFieldFilterConstraint | QueryFieldFilterConstraint[];
-    };
-
-export type FirestoreSyncPushOptions<RxDocType> = Omit<ReplicationPushOptions<RxDocType>, 'handler'>
-    & {
-        filter?(item: WithDeleted<RxDocType>): MaybePromise<boolean>;
-    };
-
-export type SyncOptionsFirestore<RxDocType> = Omit<
-    ReplicationOptions<RxDocType, any>,
-    'pull' | 'push'
-> & {
-    firestore: FirestoreOptions<RxDocType>;
-    /**
-     * In firestore it is not possible to read out
-     * the internally used write timestamp.
-     * Even if we could read it out, it is not indexed which
-     * is required for fetch 'changes-since-x'.
-     * So instead we have to rely on a custom user defined field
-     * that contains the server time which is set by firestore via serverTimestamp()
-     * IMPORTANT: The serverTimestampField MUST NOT be part of the collections RxJsonSchema!
-     * [default='serverTimestamp']
-     * @link https://groups.google.com/g/firebase-talk/c/tAmPzPei-mE
-     */
-    serverTimestampField?: string;
-    pull?: FirestoreSyncPullOptions<RxDocType>;
-    push?: FirestoreSyncPushOptions<RxDocType>;
-};
-
-export type GetQuery<RxDocType> = (ids: string[]) => Promise<QuerySnapshot<RxDocType>>;
diff --git a/node_modules/rxdb/src/plugins/replication-firestore/index.ts b/node_modules/rxdb/src/plugins/replication-firestore/index.ts
deleted file mode 100644
index 389b9d8..0000000
--- a/node_modules/rxdb/src/plugins/replication-firestore/index.ts
+++ /dev/null
@@ -1,373 +0,0 @@
-import {
-    appendToArray,
-    asyncFilter,
-    ensureNotFalsy,
-    errorToPlainJson,
-    flatClone,
-    lastOfArray,
-    toArray
-} from '../../plugins/utils/index.ts';
-
-import {
-    doc,
-    query,
-    where,
-    orderBy,
-    limit,
-    getDocs,
-    onSnapshot,
-    runTransaction,
-    writeBatch,
-    serverTimestamp,
-    QueryDocumentSnapshot,
-    waitForPendingWrites,
-    documentId
-} from 'firebase/firestore';
-
-import { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';
-import type {
-    RxCollection,
-    ReplicationPullOptions,
-    ReplicationPushOptions,
-    RxReplicationWriteToMasterRow,
-    RxReplicationPullStreamItem
-} from '../../types/index.d.ts';
-import {
-    RxReplicationState,
-    startReplicationOnLeaderShip
-} from '../replication/index.ts';
-import {
-    addRxPlugin,
-    ById,
-    getSchemaByObjectPath,
-    newRxError,
-    WithDeleted
-} from '../../index.ts';
-
-import type {
-    FirestoreCheckpointType,
-    FirestoreOptions,
-    SyncOptionsFirestore
-} from './firestore-types.ts';
-import { Subject } from 'rxjs';
-import {
-    firestoreRowToDocData,
-    getContentByIds,
-    isoStringToServerTimestamp,
-    serverTimestampToIsoString,
-    stripPrimaryKey,
-    stripServerTimestampField
-} from './firestore-helper.ts';
-
-export * from './firestore-helper.ts';
-export * from './firestore-types.ts';
-
-export class RxFirestoreReplicationState<RxDocType> extends RxReplicationState<RxDocType, FirestoreCheckpointType> {
-    constructor(
-        public readonly firestore: FirestoreOptions<RxDocType>,
-        public readonly replicationIdentifierHash: string,
-        public readonly collection: RxCollection<RxDocType>,
-        public readonly pull?: ReplicationPullOptions<RxDocType, FirestoreCheckpointType>,
-        public readonly push?: ReplicationPushOptions<RxDocType>,
-        public readonly live: boolean = true,
-        public retryTime: number = 1000 * 5,
-        public autoStart: boolean = true
-    ) {
-        super(
-            replicationIdentifierHash,
-            collection,
-            '_deleted',
-            pull,
-            push,
-            live,
-            retryTime,
-            autoStart
-        );
-    }
-}
-
-export function replicateFirestore<RxDocType>(
-    options: SyncOptionsFirestore<RxDocType>
-): RxFirestoreReplicationState<RxDocType> {
-    const collection = options.collection;
-    addRxPlugin(RxDBLeaderElectionPlugin);
-    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, FirestoreCheckpointType>> = new Subject();
-    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, FirestoreCheckpointType> | undefined;
-    options.live = typeof options.live === 'undefined' ? true : options.live;
-    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;
-    const serverTimestampField = typeof options.serverTimestampField === 'undefined' ? 'serverTimestamp' : options.serverTimestampField;
-    options.serverTimestampField = serverTimestampField;
-    const primaryPath = collection.schema.primaryPath;
-
-    /**
-     * The serverTimestampField MUST NOT be part of the collections RxJsonSchema.
-     */
-    const schemaPart = getSchemaByObjectPath(collection.schema.jsonSchema, serverTimestampField);
-    if (
-        schemaPart ||
-        // also must not be nested.
-        serverTimestampField.includes('.')
-    ) {
-        throw newRxError('RC6', {
-            field: serverTimestampField,
-            schema: collection.schema.jsonSchema
-        });
-    }
-
-    const pullFilters = options.pull?.filter !== undefined
-        ? toArray(options.pull.filter)
-        : [];
-
-    const pullQuery = query(options.firestore.collection, ...pullFilters);
-
-    if (options.pull) {
-        replicationPrimitivesPull = {
-            async handler(
-                lastPulledCheckpoint: FirestoreCheckpointType | undefined,
-                batchSize: number
-            ) {
-                let newerQuery: ReturnType<typeof query>;
-                let sameTimeQuery: ReturnType<typeof query> | undefined;
-
-                if (lastPulledCheckpoint) {
-                    const lastServerTimestamp = isoStringToServerTimestamp(lastPulledCheckpoint.serverTimestamp);
-                    newerQuery = query(pullQuery,
-                        where(serverTimestampField, '>', lastServerTimestamp),
-                        orderBy(serverTimestampField, 'asc'),
-                        limit(batchSize)
-                    );
-                    sameTimeQuery = query(pullQuery,
-                        where(serverTimestampField, '==', lastServerTimestamp),
-                        where(primaryPath, '>', lastPulledCheckpoint.id),
-                        orderBy(primaryPath, 'asc'),
-                        limit(batchSize)
-                    );
-                } else {
-                    newerQuery = query(pullQuery,
-                        orderBy(serverTimestampField, 'asc'),
-                        limit(batchSize)
-                    );
-                }
-
-                let mustsReRun = true;
-                let useDocs: QueryDocumentSnapshot<RxDocType>[] = [];
-                while (mustsReRun) {
-                    /**
-                     * Local writes that have not been persisted to the server
-                     * are in pending state and do not have a correct serverTimestamp set.
-                     * We have to ensure we only use document states that are in sync with the server.
-                     * @link https://medium.com/firebase-developers/the-secrets-of-firestore-fieldvalue-servertimestamp-revealed-29dd7a38a82b
-                     */
-                    await waitForPendingWrites(options.firestore.database);
-                    await runTransaction(options.firestore.database, async (_tx) => {
-                        useDocs = [];
-                        const [
-                            newerQueryResult,
-                            sameTimeQueryResult
-                        ] = await Promise.all([
-                            getDocs(newerQuery),
-                            sameTimeQuery ? getDocs(sameTimeQuery) : undefined
-                        ]);
-
-                        if (
-                            newerQueryResult.metadata.hasPendingWrites ||
-                            (sameTimeQuery && ensureNotFalsy(sameTimeQueryResult).metadata.hasPendingWrites)
-                        ) {
-                            return;
-                        } else {
-                            mustsReRun = false;
-
-                            if (sameTimeQuery) {
-                                useDocs = ensureNotFalsy(sameTimeQueryResult).docs as any;
-                            }
-                            const missingAmount = batchSize - useDocs.length;
-                            if (missingAmount > 0) {
-                                const additionalDocs = newerQueryResult.docs.slice(0, missingAmount).filter(x => !!x);
-                                appendToArray(useDocs, additionalDocs);
-                            }
-                        }
-                    });
-                }
-
-                if (useDocs.length === 0) {
-                    return {
-                        checkpoint: lastPulledCheckpoint ?? null,
-                        documents: []
-                    };
-                }
-                const lastDoc = ensureNotFalsy(lastOfArray(useDocs));
-                const documents: WithDeleted<RxDocType>[] = useDocs
-                    .map(row => firestoreRowToDocData(
-                        serverTimestampField,
-                        primaryPath,
-                        row
-                    ));
-                const newCheckpoint: FirestoreCheckpointType = {
-                    id: lastDoc.id,
-                    serverTimestamp: serverTimestampToIsoString(serverTimestampField, lastDoc.data())
-                };
-                const ret = {
-                    documents: documents,
-                    checkpoint: newCheckpoint
-                };
-                return ret;
-            },
-            batchSize: ensureNotFalsy(options.pull).batchSize,
-            modifier: ensureNotFalsy(options.pull).modifier,
-            stream$: pullStream$.asObservable()
-        };
-    }
-
-    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;
-    if (options.push) {
-        const pushFilter = options.push?.filter;
-        replicationPrimitivesPush = {
-            async handler(
-                rows: RxReplicationWriteToMasterRow<RxDocType>[]
-            ) {
-                if (pushFilter !== undefined) {
-                    rows = await asyncFilter(rows, (row) => pushFilter(row.newDocumentState));
-                }
-
-                const writeRowsById: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};
-                const docIds: string[] = rows.map(row => {
-                    const docId = (row.newDocumentState as any)[primaryPath];
-                    writeRowsById[docId] = row;
-                    return docId;
-                });
-                await waitForPendingWrites(options.firestore.database);
-                let conflicts: WithDeleted<RxDocType>[] = [];
-
-                /**
-                 * Everything must run INSIDE of the transaction
-                 * because on tx-errors, firebase will re-run the transaction on some cases.
-                 * @link https://firebase.google.com/docs/firestore/manage-data/transactions#transaction_failure
-                 * @link https://firebase.google.com/docs/firestore/manage-data/transactions
-                 */
-                await runTransaction(options.firestore.database, async (_tx) => {
-                    conflicts = []; // reset in case the tx has re-run.
-                    /**
-                     * @link https://stackoverflow.com/a/48423626/3443137
-                     */
-
-                    const getQuery = (ids: string[]) => {
-                        return getDocs(
-                            query(
-                                options.firestore.collection,
-                                where(documentId(), 'in', ids)
-                            )
-                        );
-                    };
-
-                    const docsInDbResult = await getContentByIds<RxDocType>(docIds, getQuery);
-
-                    const docsInDbById: ById<RxDocType> = {};
-                    docsInDbResult.forEach(row => {
-                        const docDataInDb = stripServerTimestampField(serverTimestampField, row.data());
-                        const docId = row.id;
-                        (docDataInDb as any)[primaryPath] = docId;
-                        docsInDbById[docId] = docDataInDb;
-                    });
-
-                    /**
-                     * @link https://firebase.google.com/docs/firestore/manage-data/transactions#batched-writes
-                     */
-                    const batch = writeBatch(options.firestore.database);
-                    let hasWrite = false;
-                    await Promise.all(
-                        Object.entries(writeRowsById).map(async ([docId, writeRow]) => {
-                            const docInDb: RxDocType | undefined = docsInDbById[docId];
-
-                            if (
-                                docInDb &&
-                                (
-                                    !writeRow.assumedMasterState ||
-                                    (await collection.conflictHandler({
-                                        newDocumentState: docInDb as any,
-                                        realMasterState: writeRow.assumedMasterState
-                                    }, 'replication-firestore-push')).isEqual === false
-                                )
-                            ) {
-                                // conflict
-                                conflicts.push(docInDb as any);
-                            } else {
-                                // no conflict
-                                hasWrite = true;
-                                const docRef = doc(options.firestore.collection, docId);
-                                const writeDocData = flatClone(writeRow.newDocumentState);
-                                (writeDocData as any)[serverTimestampField] = serverTimestamp();
-                                if (!docInDb) {
-                                    // insert
-                                    batch.set(docRef, stripPrimaryKey(primaryPath, writeDocData));
-                                } else {
-                                    // update
-                                    batch.update(docRef, stripPrimaryKey(primaryPath, writeDocData));
-                                }
-                            }
-                        })
-                    );
-
-                    if (hasWrite) {
-                        await batch.commit();
-                    }
-                });
-                await waitForPendingWrites(options.firestore.database);
-                return conflicts;
-            },
-            batchSize: options.push.batchSize,
-            modifier: options.push.modifier
-        };
-    }
-
-
-    const replicationState = new RxFirestoreReplicationState<RxDocType>(
-        options.firestore,
-        options.replicationIdentifier,
-        collection,
-        replicationPrimitivesPull,
-        replicationPrimitivesPush,
-        options.live,
-        options.retryTime,
-        options.autoStart
-    );
-
-    /**
-     * Use long polling to get live changes for the pull.stream$
-     */
-    if (options.live && options.pull) {
-        const startBefore = replicationState.start.bind(replicationState);
-        const cancelBefore = replicationState.cancel.bind(replicationState);
-        replicationState.start = () => {
-            const lastChangeQuery = query(
-                pullQuery,
-                orderBy(serverTimestampField, 'desc'),
-                limit(1)
-            );
-            const unsubscribe = onSnapshot(
-                lastChangeQuery,
-                (_querySnapshot) => {
-                    /**
-                     * There is no good way to observe the event stream in firestore.
-                     * So instead we listen to any write to the collection
-                     * and then emit a 'RESYNC' flag.
-                     */
-                    replicationState.reSync();
-                },
-                (error) => {
-                    replicationState.subjects.error.next(
-                        newRxError('RC_STREAM', { error: errorToPlainJson(error) })
-                    );
-                }
-            );
-            replicationState.cancel = () => {
-                unsubscribe();
-                return cancelBefore();
-            };
-            return startBefore();
-        };
-    }
-
-    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);
-
-    return replicationState;
-}
diff --git a/node_modules/rxdb/src/plugins/test-utils/config.ts b/node_modules/rxdb/src/plugins/test-utils/config.ts
index ecda304..2dbac00 100644
--- a/node_modules/rxdb/src/plugins/test-utils/config.ts
+++ b/node_modules/rxdb/src/plugins/test-utils/config.ts
@@ -11,7 +11,6 @@ import events from 'node:events';
 import * as path from 'node:path';
 import url from 'node:url';
 import type { RxStorage, RxTestStorage } from '../../types';
-import { wrappedKeyEncryptionCryptoJsStorage } from '../encryption-crypto-js/index.ts';
 
 export type TestConfig = {
     storage: RxTestStorage;
@@ -112,15 +111,6 @@ export function initTestEnvironment() {
     }
 }
 
-export function getEncryptedStorage(baseStorage = getConfig().storage.getStorage()): RxStorage<any, any> {
-    const ret = config.storage.hasEncryption ?
-        baseStorage :
-        wrappedKeyEncryptionCryptoJsStorage({
-            storage: baseStorage
-        });
-    return ret;
-}
-
 export function isNotOneOfTheseStorages(storageNames: string[]) {
     const isName = getConfig().storage.name;
     if (storageNames.includes(isName)) {
